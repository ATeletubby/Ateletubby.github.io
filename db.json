{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","path":"fancybox/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","path":"fancybox/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","path":"fancybox/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","path":"fancybox/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","path":"fancybox/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","path":"fancybox/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","path":"fancybox/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","path":"fancybox/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","path":"fancybox/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/boot.js","path":"js/boot.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/color-schema.js","path":"js/color-schema.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/debouncer.js","path":"js/debouncer.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/events.js","path":"js/events.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/lazyload.js","path":"js/lazyload.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/leancloud.js","path":"js/leancloud.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/local-search.js","path":"js/local-search.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/plugins.js","path":"js/plugins.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/default.png","path":"img/default.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/loading.gif","path":"img/loading.gif","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/police_beian.png","path":"img/police_beian.png","modified":0,"renderable":1},{"_id":"themes/fluid/source/xml/local-search.xml","path":"xml/local-search.xml","modified":0,"renderable":1},{"_id":"themes/fluid/source/lib/hint/hint.min.css","path":"lib/hint/hint.min.css","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/index.jpg","path":"img/index.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/index2.jpg","path":"img/index2.jpg","modified":0,"renderable":1},{"_id":"themes/fluid/source/img/index3.jpg","path":"img/index3.jpg","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"acad91ace80b80295b11a9b7ad4c29a2dcfdd8fb","modified":1605977205243},{"_id":"themes/landscape/.gitignore","hash":"ea2b285a29690f1eabbad0f3a158e34e9ccd1d86","modified":1605977750950},{"_id":"themes/landscape/Gruntfile.js","hash":"412e30530784993c8997aa8b1319c669b83b91c2","modified":1605977750951},{"_id":"themes/landscape/LICENSE","hash":"82ce1e15ddeabeaaca60e2186b5a3ce42b1a9c49","modified":1605977750951},{"_id":"themes/landscape/README.md","hash":"67fedfb66304f103c412f6be110bf3c40c75d4ac","modified":1605977750951},{"_id":"themes/landscape/_config.yml","hash":"ce9d2939245209b8f5c5bbbdadc917d86057d032","modified":1605977750952},{"_id":"themes/landscape/package.json","hash":"6e567a9654e61eb3f548c75edef380c2e135c433","modified":1605977750965},{"_id":"themes/landscape/languages/de.yml","hash":"d45cea36c5c83d7d09afcd1c26fff4a4c513c25b","modified":1605977750953},{"_id":"themes/landscape/languages/default.yml","hash":"f26a34a7983d4bc17c65c7f0f14da598e62ce66d","modified":1605977750954},{"_id":"themes/landscape/languages/es.yml","hash":"e3b4937da4cd2d0393b8a0ba310e70fc605cc431","modified":1605977750954},{"_id":"themes/landscape/languages/ja.yml","hash":"3e2fedca096678c0c234ebffa4637828979296fa","modified":1605977750954},{"_id":"themes/landscape/languages/fr.yml","hash":"8cb0fe4b6913b4d5b662cdd0108a923c90025f85","modified":1605977750954},{"_id":"themes/landscape/languages/ko.yml","hash":"11330316e3c1262474a2b496e40dbc29f93fe01b","modified":1605977750955},{"_id":"themes/landscape/languages/nl.yml","hash":"3d82ec703d0b3287739d7cb4750a715ae83bfcb3","modified":1605977750955},{"_id":"themes/landscape/languages/no.yml","hash":"ddf2035e920a5ecb9076138c184257d9f51896a7","modified":1605977750955},{"_id":"themes/landscape/languages/pt.yml","hash":"ae2c61b30e638f74f1a42c9ce39ac08d063b30f5","modified":1605977750956},{"_id":"themes/landscape/languages/ru.yml","hash":"2a476b4c6e04900914c81378941640ac5d58a1f0","modified":1605977750956},{"_id":"themes/landscape/languages/zh-TW.yml","hash":"f5f0ca88185da7a8457760d84bf221781473bd7c","modified":1605977750956},{"_id":"themes/landscape/languages/zh-CN.yml","hash":"b057f389c6713010f97d461e48ec959b0b6f3b44","modified":1605977750956},{"_id":"themes/landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1605977750963},{"_id":"themes/landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1605977750964},{"_id":"themes/landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1605977750965},{"_id":"themes/landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1605977750964},{"_id":"themes/landscape/layout/layout.ejs","hash":"5d86bc48b0f1bdce9a2bb548c2f8e7a4f50d499a","modified":1605977750964},{"_id":"themes/landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1605977750965},{"_id":"themes/landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1605977750965},{"_id":"themes/landscape/scripts/fancybox.js","hash":"4c130fc242cf9b59b5df6ca5eae3b14302311e8c","modified":1605977750966},{"_id":"themes/landscape/layout/_partial/after-footer.ejs","hash":"5e3b70c028d518b8f765e29a5e2020e7ba6ed589","modified":1605977750957},{"_id":"themes/landscape/layout/_partial/article.ejs","hash":"5cf2b8a1148e6f8c4bd9ca9e3b84c7e5a59d56bc","modified":1605977750958},{"_id":"themes/landscape/layout/_partial/archive-post.ejs","hash":"5062c723721d8497eebad372f57092ade45041f4","modified":1605977750957},{"_id":"themes/landscape/layout/_partial/archive.ejs","hash":"017c412bd3d60d22e493f02918e436a32d96bb84","modified":1605977750958},{"_id":"themes/landscape/layout/_partial/footer.ejs","hash":"6faefe07f3d64e21c7743276e0f55ee1544f9d86","modified":1605977750958},{"_id":"themes/landscape/layout/_partial/gauges-analytics.ejs","hash":"ace3000bd3e01d03041d5be24f7640b6c003a5b5","modified":1605977750959},{"_id":"themes/landscape/layout/_partial/google-analytics.ejs","hash":"1ccc627d7697e68fddc367c73ac09920457e5b35","modified":1605977750959},{"_id":"themes/landscape/layout/_partial/head.ejs","hash":"a36cec48782782bac92622f369c750e5c7396510","modified":1605977750959},{"_id":"themes/landscape/layout/_partial/header.ejs","hash":"cf755454675d13a0813a922b575c06b6b74ab9fd","modified":1605977750960},{"_id":"themes/landscape/layout/_partial/mobile-nav.ejs","hash":"347cf1befd2ea637c24bd5901929d8e36e359e75","modified":1605977750960},{"_id":"themes/landscape/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1605977750962},{"_id":"themes/landscape/layout/_widget/archive.ejs","hash":"0fe1e52c291c9499bd05b966e0b9aac5be351c58","modified":1605977750962},{"_id":"themes/landscape/layout/_widget/category.ejs","hash":"866790acc13fed44b7ef74c3e19c300a3d6180d8","modified":1605977750962},{"_id":"themes/landscape/layout/_widget/recent_posts.ejs","hash":"16800f85ffb036d2644a26e02facd61acb3706e9","modified":1605977750963},{"_id":"themes/landscape/layout/_widget/tag.ejs","hash":"6017c54a8c3c8ff8db491cfbea3100c139da75d6","modified":1605977750963},{"_id":"themes/landscape/layout/_widget/tagcloud.ejs","hash":"7259c179aa0c41c02e467ad892292e90430aaabc","modified":1605977750963},{"_id":"themes/landscape/source/css/_extend.styl","hash":"8ab1ad313bd6707d248c5ca1ee9a5eab8d815e42","modified":1605977750967},{"_id":"themes/landscape/source/css/_variables.styl","hash":"57bb02270eef16b4823a64ba663ccf2f247f34e5","modified":1605977750970},{"_id":"themes/landscape/source/css/style.styl","hash":"4a3e64ee8dad5834860c30b4176882eff628ca6b","modified":1605977750977},{"_id":"themes/landscape/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1605977750978},{"_id":"themes/landscape/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1605977750978},{"_id":"themes/landscape/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1605977750978},{"_id":"themes/landscape/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1605977750979},{"_id":"themes/landscape/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1605977750979},{"_id":"themes/landscape/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1605977750979},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.css","hash":"2e54d51d21e68ebc4bb870f6e57d3bfb660d4f9c","modified":1605977750982},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.js","hash":"58193c802f307ec9bc9e586c0e8a13ebef45d2f8","modified":1605977750983},{"_id":"themes/landscape/source/fancybox/jquery.fancybox.pack.js","hash":"2da892a02778236b64076e5e8802ef0566e1d9e8","modified":1605977750983},{"_id":"themes/landscape/source/js/script.js","hash":"c0d368681c687258b628bacc84cc30d353de6d47","modified":1605977750984},{"_id":"themes/landscape/layout/_partial/post/category.ejs","hash":"16128d2422645e18d1b6882d4c4df17d895bd76e","modified":1605977750960},{"_id":"themes/landscape/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1605977750961},{"_id":"themes/landscape/layout/_partial/post/date.ejs","hash":"947f513f7a85fbcf085624e46dc2ae6de8185eec","modified":1605977750960},{"_id":"themes/landscape/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1605977750961},{"_id":"themes/landscape/layout/_partial/post/nav.ejs","hash":"cbb3819ce512bd24db8bad41b8617d46eba82fdc","modified":1605977750961},{"_id":"themes/landscape/layout/_partial/post/title.ejs","hash":"d4a460a35e2112d0c7414fd5e19b3a16093f1caf","modified":1605977750961},{"_id":"themes/landscape/source/css/_partial/archive.styl","hash":"9e574d8eb1a5285ec3b4346607414770d2f7e0ff","modified":1605977750967},{"_id":"themes/landscape/source/css/_partial/article.styl","hash":"e291bc8c5f0c21080baa549d5d9ef2f39a871ea7","modified":1605977750967},{"_id":"themes/landscape/source/css/_partial/comment.styl","hash":"2834870661e490775f9154d71638bfdc72e640a6","modified":1605977750967},{"_id":"themes/landscape/source/css/_partial/footer.styl","hash":"6f7aa810f296d6a1a4486637b5a853d35a198938","modified":1605977750967},{"_id":"themes/landscape/source/css/_partial/header.styl","hash":"67e59feb18eee6026717cb440d86ab9551782628","modified":1605977750967},{"_id":"themes/landscape/source/css/_partial/highlight.styl","hash":"ac19f1621305ca9f6a7b74acd211a4c0d88690bd","modified":1605977750967},{"_id":"themes/landscape/source/css/_partial/mobile.styl","hash":"680c7b809b62cd3ad294e822793fbd0b1a32cc33","modified":1605977750968},{"_id":"themes/landscape/source/css/_partial/sidebar-aside.styl","hash":"1fb15f13ba70d5b954f62920c6b63d26e2fb2985","modified":1605977750968},{"_id":"themes/landscape/source/css/_partial/sidebar-bottom.styl","hash":"4132e25ba9680c4b911a01abc75f501cda3fa4f1","modified":1605977750968},{"_id":"themes/landscape/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1605977750969},{"_id":"themes/landscape/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1605977750969},{"_id":"themes/landscape/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1605977750969},{"_id":"themes/landscape/source/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1605977750972},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1605977750972},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1605977750974},{"_id":"themes/landscape/source/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1605977750980},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1605977750980},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-buttons.js","hash":"4c9c395d705d22af7da06870d18f434e2a2eeaf9","modified":1605977750980},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-media.js","hash":"e14c32cc6823b81b2f758512f13ed8eb9ef2b454","modified":1605977750981},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1605977750981},{"_id":"themes/landscape/source/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"83cdfea43632b613771691a11f56f99d85fb6dbd","modified":1605977750982},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1605977750974},{"_id":"themes/landscape/source/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1605977750974},{"_id":"themes/landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1605977750977},{"_id":"source/_posts/6.21.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1561085303379},{"_id":"source/_posts/6.16.md","hash":"630de8631cbaab298bc46a65ba9a973317219818","modified":1560702882177},{"_id":"themes/myTheme/layout/index.ejs","hash":"95544eccf1b4947c1e5717bf0137cea075283a5f","modified":1606023891483},{"_id":"themes/fluid/source/css/_pages/_category/category.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_tag/tag.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1604556361000},{"_id":"themes/fluid/.editorconfig","hash":"33218fbd623feb43edf5f99f15965392cecc44a6","modified":1604556361000},{"_id":"themes/fluid/.eslintrc","hash":"4bc2b19ce2b8c4d242f97d4ccf2d741e68ab0097","modified":1604556361000},{"_id":"themes/fluid/.gitattributes","hash":"a54f902957d49356376b59287b894b1a3d7a003f","modified":1604556361000},{"_id":"themes/fluid/.gitignore","hash":"bd095eee271360a38772ee1a42d4f000fb722e5f","modified":1604556361000},{"_id":"themes/fluid/LICENSE","hash":"5b919c12e4f5f5cdebb7c17ded4f10f1ebe64811","modified":1604556361000},{"_id":"themes/fluid/README.md","hash":"ea55d234aeae3eb9e232f729f8411810d65c6f49","modified":1604556361000},{"_id":"themes/fluid/README_en.md","hash":"ca8fd19a4948de1f253616a62c0e8a7d81f692f5","modified":1604556361000},{"_id":"themes/fluid/_config.yml","hash":"3f49a36098d806f4fc8411bf2cdcc9f9fc082c99","modified":1606048881073},{"_id":"themes/fluid/gulpfile.js","hash":"dc82b6be72c786721a2f5e2acc10a2a94995c540","modified":1604556361000},{"_id":"themes/fluid/package.json","hash":"623e6f2dc876daa6ab599fbac4636f54782e6ea3","modified":1604556361000},{"_id":"themes/fluid/languages/de.yml","hash":"13a6a799415fc2f6f69ebd1a399fb44426a5d641","modified":1604556361000},{"_id":"themes/fluid/languages/en.yml","hash":"a85dcc5cc21f9cab50df31e5001b8818ee62d1e2","modified":1604556361000},{"_id":"themes/fluid/languages/ja.yml","hash":"91020031a847c0361a6fd7ab990c7be4bf17529b","modified":1604556361000},{"_id":"themes/fluid/languages/zh-CN.yml","hash":"21307b4137c3d9b04bb58243747e75af0abc5a71","modified":1604556361000},{"_id":"themes/fluid/layout/404.ejs","hash":"689d9f4efd2a7f5edfd9b24561a7ade69d46617c","modified":1604556361000},{"_id":"themes/fluid/layout/about.ejs","hash":"e3e2de8b0dc63ece51c324bb7942f240cdbfc7bf","modified":1604556361000},{"_id":"themes/fluid/layout/archive.ejs","hash":"472d0813ca5b88000a7bc6039f33b7e27b5a3216","modified":1604556361000},{"_id":"themes/fluid/layout/categories.ejs","hash":"6c4ab9fcdf5f7b58238bf06276b027075872c424","modified":1604556361000},{"_id":"themes/fluid/layout/category.ejs","hash":"58291dfec65c36889dfce0ddc603540b67e4c598","modified":1604556361000},{"_id":"themes/fluid/layout/index.ejs","hash":"58e994d28fd72d585d2e4c63d0c0fd3e61dd14b8","modified":1604556361000},{"_id":"themes/fluid/layout/links.ejs","hash":"6abd180ff4dd1d5d22e4c70328e3c7f83d174d9c","modified":1604556361000},{"_id":"themes/fluid/layout/layout.ejs","hash":"9991c0a105ec5dcddf1409770a09cc6c99407964","modified":1606043111558},{"_id":"themes/fluid/layout/page.ejs","hash":"8cab50ead4cdb992d35710147a9a5308fb5df290","modified":1604556361000},{"_id":"themes/fluid/layout/post.ejs","hash":"f334657509a9b8b4e05d425d3e5f47a1c21b7dd7","modified":1604556361000},{"_id":"themes/fluid/layout/tag.ejs","hash":"0ad89eb7c92a822980fa9a85285e6d94ad845d1d","modified":1604556361000},{"_id":"themes/fluid/layout/tags.ejs","hash":"1d06af34b6cf1d8a20d2eb565e309326ceba309f","modified":1604556361000},{"_id":"themes/fluid/.github/workflows/limit.yaml","hash":"f8bd2edeb4424ee7a055b31583445d5d5dff91a4","modified":1604556361000},{"_id":"themes/fluid/.github/workflows/lint.yaml","hash":"bccd7961fa146dd5f0d70f77e7ab94e9f58d5bd3","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report.md","hash":"8f20dca8a03aefd495d0550544f25d8c6e44333e","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/bug_report_zh.md","hash":"5c5a5565bb13928bc92332d9b99b968673ea7dfb","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request.md","hash":"d3a3204d9bb2b43a69c9cb0be59bada8cb91e412","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/feature_request_zh.md","hash":"a413dc14e4737dbcaa8fb797d37f85121ede6551","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question.md","hash":"ab5eab9e3ff889c4ba7fd82846e7f5b7ae15bebc","modified":1604556361000},{"_id":"themes/fluid/.github/ISSUE_TEMPLATE/question_zh.md","hash":"e24b470f7aa8044499a4f5e39634e5dc43899011","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/archive-list.ejs","hash":"8723aa57f61134a2c1dc84cc7ea88ea366f4fda3","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/beian.ejs","hash":"bed4ee45bec0f1f1d3ed469e3197bb8f5e0b684e","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/css.ejs","hash":"ea590a8e8e48148335b94aebca2b73c19bd5f789","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/footer.ejs","hash":"99b7e3d83a5991e16c278d8431b57c35d93644a7","modified":1606046347520},{"_id":"themes/fluid/layout/_partial/head.ejs","hash":"ab70ddfcf7b14c7000130d1a2b54c75dde106d66","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/nav.ejs","hash":"70490c67b7313ae305d39331238232fe62f094f1","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/paginator.ejs","hash":"783eee847562ce14db8f723b4ae742fb69aaf620","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/post-meta.ejs","hash":"3e0fa1731b6e54dbcf52ccf8e200e83dc4549bfa","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/scripts.ejs","hash":"1d2ea9c4c905bc4b8e1c64c717246f583bd583ee","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/search.ejs","hash":"cdd7919fa01f6ef7ccc09938d662ff3d77f5d999","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/statistics.ejs","hash":"920bc618d357d48d2b96f8758f6ae8f9488fc4d8","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/toc.ejs","hash":"3d2fb5552f373e5a0c56bc356702d807bcbcb411","modified":1604556361000},{"_id":"themes/fluid/scripts/events/index.js","hash":"a6ab2c6d9f9ba58cd1fabb85c2817874246fd525","modified":1604556361000},{"_id":"themes/fluid/scripts/filters/locals.js","hash":"58d0fec976f6b1d35e7ea03edc45414088acf05c","modified":1604556361000},{"_id":"themes/fluid/scripts/filters/post-filter.js","hash":"fd567dccd9ea8c158a5dae6847dd99e272c3f43c","modified":1604556361000},{"_id":"themes/fluid/scripts/generators/local-search.js","hash":"fc2c50405b771b06b7f6cfc4e9de97b992691555","modified":1604556361000},{"_id":"themes/fluid/scripts/generators/pages.js","hash":"d9971f15fbb6b775e3d31a1b9b45011959395010","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/export-config.js","hash":"2ec0e2c79de89886c67391d5e94b0f18b2a6021e","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/page.js","hash":"4607607445233b3029ef20ed5e91de0da0a7f9c5","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/url.js","hash":"99ab4551dc9c035abcc3bf4da5def2f63449d7ec","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/utils.js","hash":"9045f47c7a71aab39f16cffb3e3847b752c2e0f1","modified":1604556361000},{"_id":"themes/fluid/scripts/helpers/wordcount.js","hash":"e58d422eddb44c1be893f65f79f4c7feecfe6d5f","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/button.js","hash":"3eb43a8cdea0a64576ad6b31b4df6c2bf5698d4c","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/checkbox.js","hash":"63468f7875c09d9557fe8315afc97175745d9087","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/group-image.js","hash":"4aeebb797026f1df25646a5d69f7fde79b1bcd26","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/label.js","hash":"f05a6d32cca79535b22907dc03edb9d3fa2d8176","modified":1604556361000},{"_id":"themes/fluid/scripts/tags/note.js","hash":"0886cfe3f8589671a1d289495e359c20a9908080","modified":1604556361000},{"_id":"themes/fluid/scripts/utils/join-path.js","hash":"629e7deb3955f750c1cfa6fc773f412e020fcef4","modified":1604556361000},{"_id":"themes/fluid/scripts/utils/object.js","hash":"61e9555f99edcb23d55361c7154e23af33153ecb","modified":1604556361000},{"_id":"themes/fluid/source/css/main.styl","hash":"d5a8a59c8d1fd17d699a951e59c4ce9ae44c419d","modified":1604556361000},{"_id":"themes/fluid/source/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1604556361000},{"_id":"themes/fluid/source/js/boot.js","hash":"1aea6f229e2298c7c134e9f1cc94576cd3f30611","modified":1604556361000},{"_id":"themes/fluid/source/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":1604556361000},{"_id":"themes/fluid/source/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1604556361000},{"_id":"themes/fluid/source/js/events.js","hash":"9b3a3dfdbc64e6b367ae2ebf7700ed611ecd0d47","modified":1604556361000},{"_id":"themes/fluid/source/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":1604556361000},{"_id":"themes/fluid/source/js/leancloud.js","hash":"23e567d77127f5787b0fc7091ddfa085c53b82f4","modified":1604556361000},{"_id":"themes/fluid/source/js/plugins.js","hash":"67d68cd2da25edbc98d433f34cf79039d5cdb082","modified":1604556361000},{"_id":"themes/fluid/source/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1604556361000},{"_id":"themes/fluid/source/js/utils.js","hash":"17ef83ebf76b262ce2cb09c49a15fb1522b82982","modified":1604556361000},{"_id":"themes/fluid/source/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1604556361000},{"_id":"themes/fluid/source/img/favicon.png","hash":"983cb362bef75ae8a5643a28b1c74b46767e1447","modified":1606029135347},{"_id":"themes/fluid/source/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1604556361000},{"_id":"themes/fluid/source/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1604556361000},{"_id":"themes/fluid/source/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1604556361000},{"_id":"themes/fluid/source/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/changyan.ejs","hash":"1b42e725454f3ae8d3bff086afcc294ca2fdeb72","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/disqus.ejs","hash":"335b52bfa1cdd671cec1c4d745216d8404b2df45","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/livere.ejs","hash":"593649f7e3f86779649e078b69f6fdc584648d72","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/remark42.ejs","hash":"1e9c4364df5a0971087f779f87f33960e3674124","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/gitalk.ejs","hash":"3cd99f13535e444fff65c97a1f60e838aeaadba6","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/utterances.ejs","hash":"71239ad210d24ad10a01c339590a797062153e8a","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/twikoo.ejs","hash":"d7d689156a8d2a6b00b306bd30628fa961449135","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/comments/valine.ejs","hash":"899664e8eea0e77ffcff436a24198ee2da750d11","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/analytics.ejs","hash":"557077a8825fffc0a2c7fe2b29f319287950244f","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/local-search.ejs","hash":"1e9ed2dde3050b5a650d0e45b9f712a6279f8f0c","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/math.ejs","hash":"76c4e0608ae362a265ac5e9c0fc49f75c1bc568e","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/mermaid.ejs","hash":"10ed1f9a611449d37736e17c4e251127b38b3772","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/nprogress.ejs","hash":"19245797dda67bc97d534a5c3f283ff6dfa8a321","modified":1604556361000},{"_id":"themes/fluid/layout/_partial/plugins/typed.ejs","hash":"ab71df2e56b60e8e193ff827e81704e5b358a977","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/footnote.js","hash":"3b2abc5f5e3b681874637e98e047dc4969eb1983","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/hello.js","hash":"38f6953e430d452d6608dacc4895ca623b4844a5","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/highlight.js","hash":"96d56372cad997b09c26dbd29a19f917140c6ab0","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/lazyload.js","hash":"0283128db63cc25b565d0da3c8a2120cc45626d1","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/merge-configs.js","hash":"2264bec80ba051a19ba80396618f3d0c22948f0b","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/preset-configs.js","hash":"202459c9444b1ba967396db3625af261b0b19820","modified":1604556361000},{"_id":"themes/fluid/scripts/events/lib/version.js","hash":"0250fb16c7c798afd1f7fc816163ea0728765568","modified":1604556361000},{"_id":"themes/fluid/source/css/_functions/base.styl","hash":"2e46f3f4e2c9fe34c1ff1c598738fc7349ae8188","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/pages.styl","hash":"b8e887bc7fb3b765a1f8ec9448eff8603a41984f","modified":1604556361000},{"_id":"themes/fluid/source/css/_mixins/base.styl","hash":"542e306ee9494e8a78e44d6d7d409605d94caeb3","modified":1604556361000},{"_id":"themes/fluid/source/css/_variables/base.styl","hash":"fe96204aa2e7ee4f7f404c9e90752a8ff822d779","modified":1604556361000},{"_id":"themes/fluid/source/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_about/about.styl","hash":"15d2786d00418e61022475194ad76445d68e27ea","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/base.styl","hash":"aa2528e71c290dc43b69dfbdcf4d8d6c258015a4","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/color-schema.styl","hash":"f7004d597163e0af7b9107b0be1df12f4c0a7bc0","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/inline.styl","hash":"fab8441a0b8d8f9db6c8370013659c035345ae79","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/keyframes.styl","hash":"94065ea50f5bef7566d184f2422f6ac20866ba22","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/rewrite.styl","hash":"94a8fb9c160386fce7dcd5ac886dee8cf3a4e750","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_archive/archive.styl","hash":"6e6f22b664199772370b59ce1678b0c148b5849f","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_category/categories.styl","hash":"1ab7db37c2f7dc7ccdb994dcb41c16a4c8920397","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_index/index.styl","hash":"4304bab8ad087911cbf5025a41014fbb67f20b5a","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_links/links.styl","hash":"cd4ebb1426abed9fda93b797b02c6d5dd71dc2a1","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_tag/tags.styl","hash":"65bfc01c76abc927fa1a23bf2422892b0d566c3f","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_post/post.styl","hash":"cc991a481214bf02c54cef4535d98ca45f8729f9","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_post/tag_plugin.styl","hash":"cbb49a17fcc030029f0c2fbe1e056613109d1ecc","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/banner.styl","hash":"e3d4acfdf0647e89a7a88f53e754ea543641ae30","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/board.styl","hash":"32d90bcc8bf2fd5d8d78e86a567973d4b69bcfa1","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footer.styl","hash":"b4dd3e9b8226e3026da832a3474ba0d2df206cae","modified":1606051414686},{"_id":"themes/fluid/source/css/_pages/_base/_widget/copy-btn.styl","hash":"2c9e05a354d4be820646a1c99f814740f299ed37","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/footnote.styl","hash":"ae9289cc89649af2042907f8a003303b987f3404","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/header.styl","hash":"7c8170d0e2de47570fe8ed523f10ee1c33138a9f","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/qrcode.styl","hash":"461d609a802a4f9aa9f492411ed8074813a956b7","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/scroll-btn.styl","hash":"e4ad804ab26bdbf5b55abbc5548b6db395cfed04","modified":1604556361000},{"_id":"themes/fluid/source/css/_pages/_base/_widget/search.styl","hash":"10f7e91a91e681fb9fe46f9df7707b9ef78707c8","modified":1604556361000},{"_id":"source/_posts/手写一个简单的vue框架.md","hash":"840d67ef976c50227f339d804a49c2a001110827","modified":1606034058066},{"_id":"source/_posts/te.md","hash":"0bbf188209e90e6e9976dfb83f34ba94acffd008","modified":1606034071761},{"_id":"source/_posts/中文.md","hash":"cb63a369e55ed05923187d6ab0f96132c3f0daae","modified":1606034125149},{"_id":"source/_posts/尝试手写一个简易的vue框架.md","hash":"50ff7407085b36cb2d6a61ed69c2c997f13878be","modified":1607149423872},{"_id":"source/about/index.md","hash":"22796d5d42c5941ba0752da31d78a0ea5a71b2b2","modified":1606037642943},{"_id":"themes/fluid/source/img/index.jpg","hash":"73721cd7333ea72f04ef48d871407a40a5932931","modified":1606035322097},{"_id":"themes/fluid/source/img/index3.jpg","hash":"f76b203cf34e23c046364052d58e97e38764f27b","modified":1606040872532},{"_id":"themes/fluid/source/img/index2.jpg","hash":"0746c2019fd1077016086e926fbcae3d0ae33bc1","modified":1606036035183},{"_id":"themes/fluid/layout/_partial/music.ejs","hash":"a8adea24a9c74561f15bb0d0b3e6ac633e68d0c9","modified":1606051251468},{"_id":"public/local-search.xml","hash":"c2e0919a25d19a0c54f6b68f2e5da34ce064f9a1","modified":1612891417377},{"_id":"public/about/index.html","hash":"55e6494aebb12e6f88c60769698b0f2e4ebf9403","modified":1606064717487},{"_id":"public/2020/10/01/尝试手写一个简易的vue框架/index.html","hash":"739741d5511325bdc71f2da2af98f768eccdb05b","modified":1607148711673},{"_id":"public/archives/index.html","hash":"e13690ac444c1ebd29363a2e5d42340b7f0c5928","modified":1612891417377},{"_id":"public/archives/2020/index.html","hash":"675ae743a09982bd9949db73ad2b6ee6b2cde7e2","modified":1612891417377},{"_id":"public/archives/2020/10/index.html","hash":"e229b7b64ba413512172282a2c5d0ae4dc1cd46d","modified":1606064717487},{"_id":"public/index.html","hash":"6ead33fa6111c25ada98dc9a211cf89038395a02","modified":1612891417377},{"_id":"public/tags/前端/index.html","hash":"9e052a0ce78bb5416c64bd8ec14e1622bb918424","modified":1607149671068},{"_id":"public/404.html","hash":"cf6142d576fcfcee78a7002e6c3c7973d927e1a0","modified":1606064717487},{"_id":"public/tags/index.html","hash":"1ba8e923e5996dd90d650d0b39de31b75ba6d827","modified":1612891417377},{"_id":"public/links/index.html","hash":"6467b0a961480ebb7c7e3374f418e533ec1edfc5","modified":1606064717487},{"_id":"public/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1606051657708},{"_id":"public/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1606051657708},{"_id":"public/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1606051657708},{"_id":"public/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1606051657708},{"_id":"public/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1606051657708},{"_id":"public/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1606051657708},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"04c3bf56d87a0828935bd6b4aee859995f321693","modified":1606051657708},{"_id":"public/css/fonts/FontAwesome.otf","hash":"b5b4f9be85f91f10799e87a083da1d050f842734","modified":1606051657708},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"7619748fe34c64fb157a57f6d4ef3678f63a8f5e","modified":1606051657708},{"_id":"public/fancybox/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1606051657708},{"_id":"public/img/avatar.png","hash":"fe739a158cc128f70f780eb5fa96f388b81d478f","modified":1606051657708},{"_id":"public/xml/local-search.xml","hash":"8c96ba6a064705602ce28d096fd7dd9069630a55","modified":1606051657708},{"_id":"public/img/loading.gif","hash":"2d2fc0f947940f98c21afafef39ecf226a2e8d55","modified":1606051657708},{"_id":"public/img/favicon.png","hash":"983cb362bef75ae8a5643a28b1c74b46767e1447","modified":1606051657708},{"_id":"public/img/police_beian.png","hash":"90efded6baa2dde599a9d6b1387973e8e64923ea","modified":1606051657708},{"_id":"public/img/default.png","hash":"7bb2b8ee07db305bcadee2985b81b942027ae940","modified":1606051657708},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"7f09c97f333917034ad08fa7295e916c9f72fd3f","modified":1606051657708},{"_id":"public/img/index.jpg","hash":"73721cd7333ea72f04ef48d871407a40a5932931","modified":1606051657708},{"_id":"public/css/style.css","hash":"d4cfa90089c78a8b791252afae9fafa3b5658900","modified":1606051657708},{"_id":"public/fancybox/jquery.fancybox.css","hash":"aaa582fb9eb4b7092dc69fcb2d5b1c20cca58ab6","modified":1606051657708},{"_id":"public/js/script.js","hash":"2876e0b19ce557fca38d7c6f49ca55922ab666a1","modified":1606051657708},{"_id":"public/fancybox/helpers/jquery.fancybox-media.js","hash":"294420f9ff20f4e3584d212b0c262a00a96ecdb3","modified":1606051657708},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1606051657708},{"_id":"public/fancybox/helpers/jquery.fancybox-buttons.js","hash":"dc3645529a4bf72983a39fa34c1eb9146e082019","modified":1606051657708},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1606051657708},{"_id":"public/js/boot.js","hash":"1aea6f229e2298c7c134e9f1cc94576cd3f30611","modified":1606051657708},{"_id":"public/js/color-schema.js","hash":"7d7444387e549e06a4a378706df92558de62e4e7","modified":1606051657708},{"_id":"public/js/debouncer.js","hash":"045f324777bdfb99d4c17b1806169f029f897a65","modified":1606051657708},{"_id":"public/js/events.js","hash":"9b3a3dfdbc64e6b367ae2ebf7700ed611ecd0d47","modified":1606051657708},{"_id":"public/js/lazyload.js","hash":"0df461660bbd73a79f3125ba4e9bdbc856232e6b","modified":1606051657708},{"_id":"public/css/main.css","hash":"94ad3dde1cf09b2e6a7821ec7c15e46a2d7f4115","modified":1606051657708},{"_id":"public/css/gitalk.css","hash":"a57b3cc8e04a0a4a27aefa07facf5b5e7bca0e76","modified":1606051657708},{"_id":"public/js/leancloud.js","hash":"23e567d77127f5787b0fc7091ddfa085c53b82f4","modified":1606051657708},{"_id":"public/js/local-search.js","hash":"13d5ef2fe68c49bd6096781034dbb26c190b5176","modified":1606051657708},{"_id":"public/js/plugins.js","hash":"67d68cd2da25edbc98d433f34cf79039d5cdb082","modified":1606051657708},{"_id":"public/js/utils.js","hash":"17ef83ebf76b262ce2cb09c49a15fb1522b82982","modified":1606051657708},{"_id":"public/fancybox/helpers/jquery.fancybox-thumbs.js","hash":"47da1ae5401c24b5c17cc18e2730780f5c1a7a0c","modified":1606051657708},{"_id":"public/lib/hint/hint.min.css","hash":"b38df228460ebfb4c0b6085336ee2878fe85aafe","modified":1606051657708},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"a275426daefd3716c53561fad121d258a7f05b47","modified":1606051657708},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1606051657708},{"_id":"public/fancybox/jquery.fancybox.pack.js","hash":"9e0d51ca1dbe66f6c0c7aefd552dc8122e694a6e","modified":1606051657708},{"_id":"public/fancybox/jquery.fancybox.js","hash":"d08b03a42d5c4ba456ef8ba33116fdbb7a9cabed","modified":1606051657708},{"_id":"public/img/index2.jpg","hash":"0746c2019fd1077016086e926fbcae3d0ae33bc1","modified":1606051657708},{"_id":"public/img/index3.jpg","hash":"f76b203cf34e23c046364052d58e97e38764f27b","modified":1606051657708},{"_id":"source/_posts/小程序众包包完成了.md","hash":"da9abe0550639f8997910bfa1155ebe232d37685","modified":1607148152728},{"_id":"public/2020/11/23/小程序众包包完成了/index.html","hash":"265fe65fd1bee310dc080ff04607a698ad848c4e","modified":1607148711673},{"_id":"public/archives/2020/11/index.html","hash":"b373a02b9016a1ea888911f5f75a2549c0cd7965","modified":1607148711673},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/hijiki.model.json","hash":"feff43bf7498d213982c3736c2c029664e4bcbd2","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/hijiki.pose.json","hash":"81438bf69b32c7c11e311b4fe043730cdc7b7ec2","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/00_idle.mtn","hash":"b224c60e463b9f71ddbfc0c720e430496c175f4f","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/01.mtn","hash":"fb550833ae22c9954c3e01df37ed29b2d61700f2","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/02.mtn","hash":"7eafc52edc73b7cb80ae70d34b43c6ac778fa47b","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/03.mtn","hash":"f900737c7a98441cbb2e05255427e6260e19ae68","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/04.mtn","hash":"c7a25d3c5d783639bae18db2f3cd284b819c3c85","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/05.mtn","hash":"dd20ad24b5d1830a5d44b9bccb28f922eea5e0e5","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/06.mtn","hash":"ad404bd852d276cdd3d054c953e23f90e4e45ae1","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/07.mtn","hash":"b7f2e3a9fa4f3ffbb6e64a08f8d9f45ca1868ffb","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/mtn/08.mtn","hash":"4411c7651ff65195b113d95e7d5ebef8a59a37d9","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/package.json","hash":"3d6b327c695847fa6f40686825c03d5655cfd2a0","modified":1606064717487},{"_id":"public/live2dw/lib/L2Dwidget.min.js","hash":"5f1a807437cc723bcadc3791d37add5ceed566a2","modified":1606064717487},{"_id":"public/live2dw/lib/L2Dwidget.min.js.map","hash":"3290fe2df45f065b51a1cd7b24ec325cbf9bb5ce","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/moc/hijiki.moc","hash":"44289e62545a7046e0f5231103a851750b78524e","modified":1606064717487},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js","hash":"35bb5b588b6de25c9be2dd51d3fd331feafac02d","modified":1606064717487},{"_id":"public/live2dw/assets/live2d-widget-model-hijiki/assets/moc/hijiki.2048/texture_00.png","hash":"66464e0d96439695b5542c5e2f5be60739c29999","modified":1606064717487},{"_id":"public/live2dw/lib/L2Dwidget.0.min.js.map","hash":"35e71cc2a130199efb167b9a06939576602f0d75","modified":1606064717487},{"_id":"source/_posts/微信小程序大赛总结.md","hash":"193bff1f7fd80fa26d1355066ab07c7570a3eda2","modified":1607149664093},{"_id":"public/2020/09/23/微信小程序大赛总结/index.html","hash":"a498a4463b7417a92b3292ddfa9341f78706052a","modified":1612891417377},{"_id":"public/2020/08/20/尝试手写一个简易的vue框架/index.html","hash":"4d07706ee0f8e021c7fa193cc29aab14760240e9","modified":1607149671068},{"_id":"public/archives/2020/08/index.html","hash":"72fa5c72b0d1d44d9229b8946e2f64b587c4c689","modified":1612891417377},{"_id":"public/archives/2020/09/index.html","hash":"76c3550d48ef91c06aa06ceba4766647a2fbd32d","modified":1612891417377},{"_id":"public/tags/感想/index.html","hash":"5c240a8aa918eeb4963ee90740bd6d851e25a4f8","modified":1607149671068},{"_id":"source/_posts/JS的词法作用域与this的问题.md","hash":"586ab095fab7d673a63c246cc957d0d7517c694e","modified":1612891383157},{"_id":"public/2021/02/10/JS的词法作用域与this的问题/index.html","hash":"43ca23bb8e2be11195d65268673446fd108c44cd","modified":1612891417377},{"_id":"public/archives/2021/index.html","hash":"b8f4a7f5bd6931480519ec187c25bb656f31bdbf","modified":1612891417377},{"_id":"public/archives/2021/02/index.html","hash":"b8f4a7f5bd6931480519ec187c25bb656f31bdbf","modified":1612891417377},{"_id":"public/tags/前端，Javascript/index.html","hash":"e91730deb3787f9db5d132872eb38af91a40c4cb","modified":1612891417377}],"Category":[],"Data":[],"Page":[{"title":"about me","date":"2020-11-22T08:43:32.000Z","_content":"\nI am <strong>JerrySun</strong>, an <strong>INFJ</strong> and front end engineer. This blog is concerned about Front-End, my thought and other interesting topics. \n\nPlease feel free to leave a comment or contact me by email if you have any question.\nEmail: jerry19960730@outlook.com","source":"about/index.md","raw":"\n---\ntitle: about me\ndate: 2020-11-22 16:43:32\n---\n\nI am <strong>JerrySun</strong>, an <strong>INFJ</strong> and front end engineer. This blog is concerned about Front-End, my thought and other interesting topics. \n\nPlease feel free to leave a comment or contact me by email if you have any question.\nEmail: jerry19960730@outlook.com","updated":"2020-11-22T09:34:02.943Z","path":"about/index.html","_id":"ckhsvscao00000ouh32g48ysw","comments":1,"layout":"page","content":"<p>I am <strong>JerrySun</strong>, an <strong>INFJ</strong> and front end engineer. This blog is concerned about Front-End, my thought and other interesting topics. </p>\n<p>Please feel free to leave a comment or contact me by email if you have any question.<br>Email: <a href=\"mailto:&#x6a;&#x65;&#114;&#114;&#x79;&#x31;&#x39;&#x39;&#54;&#48;&#55;&#51;&#48;&#x40;&#x6f;&#x75;&#116;&#108;&#111;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#x65;&#114;&#114;&#x79;&#x31;&#x39;&#x39;&#54;&#48;&#55;&#51;&#48;&#x40;&#x6f;&#x75;&#116;&#108;&#111;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>I am <strong>JerrySun</strong>, an <strong>INFJ</strong> and front end engineer. This blog is concerned about Front-End, my thought and other interesting topics. </p>\n<p>Please feel free to leave a comment or contact me by email if you have any question.<br>Email: <a href=\"mailto:&#x6a;&#x65;&#114;&#114;&#x79;&#x31;&#x39;&#x39;&#54;&#48;&#55;&#51;&#48;&#x40;&#x6f;&#x75;&#116;&#108;&#111;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#x6d;\">&#x6a;&#x65;&#114;&#114;&#x79;&#x31;&#x39;&#x39;&#54;&#48;&#55;&#51;&#48;&#x40;&#x6f;&#x75;&#116;&#108;&#111;&#x6f;&#107;&#x2e;&#x63;&#x6f;&#x6d;</a></p>\n"}],"Post":[{"title":"尝试手写一个简易的vue框架","date":"2020-08-19T18:05:25.000Z","_content":"\nVue是一款帮助前端快读构建UI的渐进式框架。了解原理有助于项目的构建。\n\n\n### 准备工作\n创建了一个id为app的div节点，作为挂载点。子节点包含了\\{{\\}}，v-html，v-model，@click这几种绑定数据与事件的属性。\n```\n<div id=\"app\">\n    <div>{{ name }}</div>\n    <div v-html=\"value\"></div>\n    <input v-model=\"value\"/>\n    <button @click=\"changeValue\">changeValueTo1</button>\n</div>\n```\n假设存在一个Vue类，用一个对象options作为其构建函数的参数，其中包括了el，data，methods三个属性。最后创建了一个Vue实例。\n```\n<script>\n  class Vue {\n    constructor(options){\n        ...\n    }\n    ...\n  }\n  \n  let options = {\n    el: \"#app\",\n    data:{\n      name: 'Jerry',\n      value: 100,\n    },\n    methods: {\n      changeValue: function(){\n        this.value = 1;\n      }\n    }\n  }\n  let app = new Vue(options);\n</script>\n```\n之后要做的便是实现这个Vue类，能够让options.data和前面的视图层绑定在一起。\n\n### 构造函数\n定义$el,$options用来存放挂载点和vue实例数据。\n$watchEvent和三个方法的作用在后文会解释。\n```\nconstructor(options){\n    this.$el = document.querySelector(options.el);\n    this.$options = options;\n    // 存放被劫持的节点\n    this.$watchEvent = {}\n    // 代理options.data中的数据\n    this.proxyData();\n    // 劫持事件\n    this.observe();\n    // 编译 \n    this.compile(this.$el);\n}\n```\n\n### 数据代理\n将options.data里所有参数赋给vue实例，通过`Object.defineProperty`可以的getter和setter函数实现代理。这样可以通过实例直接访问或修改options中的数据。\n```\nproxyData(){\n    for (let key in this.$options.data){\n      Object.defineProperty(this,key, {\n        configurable: false,\n        enumerable: true,\n        // value: '',\n        // writable: true,     \n        get(){\n          return this.$options.data[key];\n        },\n        set(val){\n          this.$options.data[key] = val;\n        }\n      })\n    }\n}\n```\n关于`Object.defineProperty`的参数和用法可以参考[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n### 数据侦听\n下一步是对`$options.data`里的各个属性进行侦听。Vue2也是运用了`Object.defineProperty`来实现观察者模式。\n```\nobserve(){\n    let that = this;\n    for (let key in this.$options.data){\n      let value = this.$options.data[key];\n      Object.defineProperty(this.$options.data, key, {\n        configurable: false,\n        enumerable: true,\n        get(){\n          console.log('获取数据');\n          return value;\n        },\n        set(val){\n          console.log('设置数据');\n          value = val;\n          if (that.$watchEvent[key]) {\n            that.$watchEvent[key].forEach((item,index)=>{\n              item.update();\n            })\n          }\n        }\n      })\n    }\n}\n```\n现在option.data中的属性都被监听着。获取和设置这些属性能够触发一些行为。\n\n\n### 依赖收集\n所有数据被监听后，还需要找到视图中与数据绑定的节点。\n\n先创建一个Watch类，来监听与data绑定的dom节点。\n```\nclass Watch{\n  constructor(vm,key,node,attr,nodeType){\n    this.vm = vm;\n    // key 为绑定的vm触发的属性\n    this.key = key;\n    // vm[key]数据绑定的HTML节点\n    this.node = node;\n    // vm[key]绑定的html节点的属性名称\n    this.attr = attr;\n    // 节点类型\n    this.nodeType = nodeType;\n  }\n  update(){\n    console.log('更新视图');\n    this.node[this.attr] = this.vm[this.key]; \n  }\n}\n```\n在`constructor`中声明变量`$watchEvent`，用来存储数据与dom节点的联系。其数据结构如下所示\n```\n$watchEvent = {\n    name: [Watch],\n    value: [Watch,Watch,Watch]\n}\n\n```\n可以看到，`$watchEvent`将data中的属性名作为key，watch实例数组作为value。其中每一个watch实例保存着依赖该数据的dom节点。\n\n当一个数据变化后，该数据的setter被触发，然后setter再触发每一个Watch实例的update方法。\n```\n// observe()\nset(val){\n  console.log('触发设置内容事件');\n  value = val;\n  if (that.$watchEvent[key]) {\n    that.$watchEvent[key].forEach((item,index)=>{\n      item.update();\n    })\n  }\n  // 触发更新事件\n}\n```\n这样视图也会更新。\n\n### 编译\n建立好`$watchEvent`和`Watch`类后，需要将el节点里所有childNodes进行遍历，找到使用模板语法、v-html等自定义属性的Dom节点。通过nodeType来判断节点的类型。\n```\nRnode.childNodes.forEach((node, index) => {\n  if (node.nodeType == 1){\n    //处理元素类型的节点\n    ...\n  } else if (node.nodeType == 3){\n    //处理文本类型的节点\n}\n}\n```\n##### 元素类型的节点\n\n对于元素类型的节点，主要是找到节点的自定义属性。如v-html，v-model。\n\n如果节点使用了v-html，Watch将绑定的数据与节点的innerHTML联系起来。一旦数据变化，Watch触发update，节点的innerHTML也随之变化。\n```\nif (node.hasAttribute('v-html')){\n  let vmKey = node.getAttribute('v-html').trim();\n  node.innerHTML = this[vmKey];\n  let watcher = new Watch(this, vmKey, node, 'innerHTML');\n  if (this.$watchEvent[vmKey]){\n    this.$watchEvent[vmKey].push(watcher);\n  } else {\n    this.$watchEvent[vmKey] = [];\n    this.$watchEvent[vmKey].push(watcher);\n  }\n  // 删除节点事件\n  node.removeAttribute('v-html');\n}\n```\n对于使用v-model的节点，Watch将绑定的数据与节点的value联系起来，数据变化，value也变化。同时，对节点绑定监听事件，节点的value变化后，实例数据也跟着变化。这样便实现了双向绑定。\n```\nif (node.hasAttribute('v-model')){\n  let vmKey = node.getAttribute('v-model').trim();\n  node.value = this[vmKey];\n  let watcher = new Watch(this, vmKey, node, 'value');\n  if (this.$watchEvent[vmKey]){\n    this.$watchEvent[vmKey].push(watcher);\n  } else {\n    this.$watchEvent[vmKey] = [];\n    this.$watchEvent[vmKey].push(watcher);\n  }\n  // 绑定input监听事件\n  node.addEventListener('input', (event)=>{\n    this[vmKey] = node.value;\n  })\n  node.removeAttribute('v-model');\n}\n```\n\n如果遇到事件属性，为该节点绑定该事件。\n\n```\nif (node.hasAttribute('@click')){\n  let vmKey = node.getAttribute('@click').trim();\n  node.addEventListener('click',(event)=>{\n    this.eventFn = this.$options.methods[vmKey].bind(this)();\n  })\n}\n```\n如果元素类型的节点存在子节点，需要对该节点递归调用compile方法。\n```\n// 元素类型的节点还有子节点\nif (node.childNodes.length > 0){\n  this.compile(node);\n}\n```\n##### 文本类型的节点\n遇到节点是文本类型的，watch将节点的`textContent`属性和数据相联系。`textContent`需要先用正则对模板语法处理，找到vmKey。当数据改变，整个`textContent`区域渲染为最新的数据。\n```\nif (node.nodeType == 3){\n    // 文本类型\n    let reg = /\\{\\{(.*)\\}\\}/g;\n    console.log(node);\n    node.textContent = node.textContent.replace(reg, (match, vmKey)=>{\n      vmKey = vmKey.trim();\n      if (this.hasOwnProperty(vmKey)){\n        let watcher = new Watch(this, vmKey, node, 'textContent');\n        if (this.$watchEvent[vmKey]){\n          this.$watchEvent[vmKey].push(watcher);\n        } else {\n          this.$watchEvent[vmKey] = [];\n          this.$watchEvent[vmKey].push(watcher);\n        }\n      }\n      return this[vmKey]\n    })\n}\n```\n\n<!--### 生命周期 -->\n<!--##### beforeCreate 和 created-->\n<!--```-->\n<!--update(){-->\n<!--if (typeof options.beforeUpdate === 'function'){-->\n<!--  options.beforeUpdate.call(this);-->\n<!--}-->\n<!--this.node[this.attr] = this.vm[this.key]; -->\n<!--if (typeof options.updated === 'function'){-->\n<!--  options.updated.call(this);-->\n<!--}-->\n<!--}-->\n<!--```-->\n\n这样，一个简易的vue框架完成了。\n\n\n[代码地址](http://teletubby.github.io)\n","source":"_posts/尝试手写一个简易的vue框架.md","raw":"---\ntitle: 尝试手写一个简易的vue框架\ndate: 2020-8-20 02:05:25\ntags: 前端\n---\n\nVue是一款帮助前端快读构建UI的渐进式框架。了解原理有助于项目的构建。\n\n\n### 准备工作\n创建了一个id为app的div节点，作为挂载点。子节点包含了\\{{\\}}，v-html，v-model，@click这几种绑定数据与事件的属性。\n```\n<div id=\"app\">\n    <div>{{ name }}</div>\n    <div v-html=\"value\"></div>\n    <input v-model=\"value\"/>\n    <button @click=\"changeValue\">changeValueTo1</button>\n</div>\n```\n假设存在一个Vue类，用一个对象options作为其构建函数的参数，其中包括了el，data，methods三个属性。最后创建了一个Vue实例。\n```\n<script>\n  class Vue {\n    constructor(options){\n        ...\n    }\n    ...\n  }\n  \n  let options = {\n    el: \"#app\",\n    data:{\n      name: 'Jerry',\n      value: 100,\n    },\n    methods: {\n      changeValue: function(){\n        this.value = 1;\n      }\n    }\n  }\n  let app = new Vue(options);\n</script>\n```\n之后要做的便是实现这个Vue类，能够让options.data和前面的视图层绑定在一起。\n\n### 构造函数\n定义$el,$options用来存放挂载点和vue实例数据。\n$watchEvent和三个方法的作用在后文会解释。\n```\nconstructor(options){\n    this.$el = document.querySelector(options.el);\n    this.$options = options;\n    // 存放被劫持的节点\n    this.$watchEvent = {}\n    // 代理options.data中的数据\n    this.proxyData();\n    // 劫持事件\n    this.observe();\n    // 编译 \n    this.compile(this.$el);\n}\n```\n\n### 数据代理\n将options.data里所有参数赋给vue实例，通过`Object.defineProperty`可以的getter和setter函数实现代理。这样可以通过实例直接访问或修改options中的数据。\n```\nproxyData(){\n    for (let key in this.$options.data){\n      Object.defineProperty(this,key, {\n        configurable: false,\n        enumerable: true,\n        // value: '',\n        // writable: true,     \n        get(){\n          return this.$options.data[key];\n        },\n        set(val){\n          this.$options.data[key] = val;\n        }\n      })\n    }\n}\n```\n关于`Object.defineProperty`的参数和用法可以参考[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty)\n\n### 数据侦听\n下一步是对`$options.data`里的各个属性进行侦听。Vue2也是运用了`Object.defineProperty`来实现观察者模式。\n```\nobserve(){\n    let that = this;\n    for (let key in this.$options.data){\n      let value = this.$options.data[key];\n      Object.defineProperty(this.$options.data, key, {\n        configurable: false,\n        enumerable: true,\n        get(){\n          console.log('获取数据');\n          return value;\n        },\n        set(val){\n          console.log('设置数据');\n          value = val;\n          if (that.$watchEvent[key]) {\n            that.$watchEvent[key].forEach((item,index)=>{\n              item.update();\n            })\n          }\n        }\n      })\n    }\n}\n```\n现在option.data中的属性都被监听着。获取和设置这些属性能够触发一些行为。\n\n\n### 依赖收集\n所有数据被监听后，还需要找到视图中与数据绑定的节点。\n\n先创建一个Watch类，来监听与data绑定的dom节点。\n```\nclass Watch{\n  constructor(vm,key,node,attr,nodeType){\n    this.vm = vm;\n    // key 为绑定的vm触发的属性\n    this.key = key;\n    // vm[key]数据绑定的HTML节点\n    this.node = node;\n    // vm[key]绑定的html节点的属性名称\n    this.attr = attr;\n    // 节点类型\n    this.nodeType = nodeType;\n  }\n  update(){\n    console.log('更新视图');\n    this.node[this.attr] = this.vm[this.key]; \n  }\n}\n```\n在`constructor`中声明变量`$watchEvent`，用来存储数据与dom节点的联系。其数据结构如下所示\n```\n$watchEvent = {\n    name: [Watch],\n    value: [Watch,Watch,Watch]\n}\n\n```\n可以看到，`$watchEvent`将data中的属性名作为key，watch实例数组作为value。其中每一个watch实例保存着依赖该数据的dom节点。\n\n当一个数据变化后，该数据的setter被触发，然后setter再触发每一个Watch实例的update方法。\n```\n// observe()\nset(val){\n  console.log('触发设置内容事件');\n  value = val;\n  if (that.$watchEvent[key]) {\n    that.$watchEvent[key].forEach((item,index)=>{\n      item.update();\n    })\n  }\n  // 触发更新事件\n}\n```\n这样视图也会更新。\n\n### 编译\n建立好`$watchEvent`和`Watch`类后，需要将el节点里所有childNodes进行遍历，找到使用模板语法、v-html等自定义属性的Dom节点。通过nodeType来判断节点的类型。\n```\nRnode.childNodes.forEach((node, index) => {\n  if (node.nodeType == 1){\n    //处理元素类型的节点\n    ...\n  } else if (node.nodeType == 3){\n    //处理文本类型的节点\n}\n}\n```\n##### 元素类型的节点\n\n对于元素类型的节点，主要是找到节点的自定义属性。如v-html，v-model。\n\n如果节点使用了v-html，Watch将绑定的数据与节点的innerHTML联系起来。一旦数据变化，Watch触发update，节点的innerHTML也随之变化。\n```\nif (node.hasAttribute('v-html')){\n  let vmKey = node.getAttribute('v-html').trim();\n  node.innerHTML = this[vmKey];\n  let watcher = new Watch(this, vmKey, node, 'innerHTML');\n  if (this.$watchEvent[vmKey]){\n    this.$watchEvent[vmKey].push(watcher);\n  } else {\n    this.$watchEvent[vmKey] = [];\n    this.$watchEvent[vmKey].push(watcher);\n  }\n  // 删除节点事件\n  node.removeAttribute('v-html');\n}\n```\n对于使用v-model的节点，Watch将绑定的数据与节点的value联系起来，数据变化，value也变化。同时，对节点绑定监听事件，节点的value变化后，实例数据也跟着变化。这样便实现了双向绑定。\n```\nif (node.hasAttribute('v-model')){\n  let vmKey = node.getAttribute('v-model').trim();\n  node.value = this[vmKey];\n  let watcher = new Watch(this, vmKey, node, 'value');\n  if (this.$watchEvent[vmKey]){\n    this.$watchEvent[vmKey].push(watcher);\n  } else {\n    this.$watchEvent[vmKey] = [];\n    this.$watchEvent[vmKey].push(watcher);\n  }\n  // 绑定input监听事件\n  node.addEventListener('input', (event)=>{\n    this[vmKey] = node.value;\n  })\n  node.removeAttribute('v-model');\n}\n```\n\n如果遇到事件属性，为该节点绑定该事件。\n\n```\nif (node.hasAttribute('@click')){\n  let vmKey = node.getAttribute('@click').trim();\n  node.addEventListener('click',(event)=>{\n    this.eventFn = this.$options.methods[vmKey].bind(this)();\n  })\n}\n```\n如果元素类型的节点存在子节点，需要对该节点递归调用compile方法。\n```\n// 元素类型的节点还有子节点\nif (node.childNodes.length > 0){\n  this.compile(node);\n}\n```\n##### 文本类型的节点\n遇到节点是文本类型的，watch将节点的`textContent`属性和数据相联系。`textContent`需要先用正则对模板语法处理，找到vmKey。当数据改变，整个`textContent`区域渲染为最新的数据。\n```\nif (node.nodeType == 3){\n    // 文本类型\n    let reg = /\\{\\{(.*)\\}\\}/g;\n    console.log(node);\n    node.textContent = node.textContent.replace(reg, (match, vmKey)=>{\n      vmKey = vmKey.trim();\n      if (this.hasOwnProperty(vmKey)){\n        let watcher = new Watch(this, vmKey, node, 'textContent');\n        if (this.$watchEvent[vmKey]){\n          this.$watchEvent[vmKey].push(watcher);\n        } else {\n          this.$watchEvent[vmKey] = [];\n          this.$watchEvent[vmKey].push(watcher);\n        }\n      }\n      return this[vmKey]\n    })\n}\n```\n\n<!--### 生命周期 -->\n<!--##### beforeCreate 和 created-->\n<!--```-->\n<!--update(){-->\n<!--if (typeof options.beforeUpdate === 'function'){-->\n<!--  options.beforeUpdate.call(this);-->\n<!--}-->\n<!--this.node[this.attr] = this.vm[this.key]; -->\n<!--if (typeof options.updated === 'function'){-->\n<!--  options.updated.call(this);-->\n<!--}-->\n<!--}-->\n<!--```-->\n\n这样，一个简易的vue框架完成了。\n\n\n[代码地址](http://teletubby.github.io)\n","slug":"尝试手写一个简易的vue框架","published":1,"updated":"2020-12-05T06:23:43.872Z","_id":"ckhsvscas00010ouhbo5519eg","comments":1,"layout":"post","photos":[],"link":"","content":"<p>Vue是一款帮助前端快读构建UI的渐进式框架。了解原理有助于项目的构建。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>创建了一个id为app的div节点，作为挂载点。子节点包含了&lt;!–swig￼14–&gt;，v-html，v-model，@click这几种绑定数据与事件的属性。</p>\n<pre><code class=\"hljs handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">name</span> &#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;value&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;value&quot;</span>/&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeValue&quot;</span>&gt;</span>changeValueTo1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>\n<p>假设存在一个Vue类，用一个对象options作为其构建函数的参数，其中包括了el，data，methods三个属性。最后创建了一个Vue实例。</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"javascript\">  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vue</span> </span>&#123;</span>\n<span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">options</span>)</span>&#123;</span>\n        ...\n    &#125;\n    ...\n  &#125;\n  \n<span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> options = &#123;</span>\n<span class=\"javascript\">    el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span>\n    data:&#123;\n<span class=\"javascript\">      name: <span class=\"hljs-string\">&#x27;Jerry&#x27;</span>,</span>\n      value: 100,\n    &#125;,\n    methods: &#123;\n<span class=\"javascript\">      changeValue: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.value = <span class=\"hljs-number\">1</span>;</span>\n      &#125;\n    &#125;\n  &#125;\n<span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(options);</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>之后要做的便是实现这个Vue类，能够让options.data和前面的视图层绑定在一起。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>定义$el,$options用来存放挂载点和vue实例数据。<br>$watchEvent和三个方法的作用在后文会解释。</p>\n<pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">constructor</span>(options)&#123;\n    <span class=\"hljs-keyword\">this</span>.$el = document.querySelector(options.el);\n    <span class=\"hljs-keyword\">this</span>.$options = options;\n    <span class=\"hljs-comment\">// 存放被劫持的节点</span>\n    <span class=\"hljs-keyword\">this</span>.$watchEvent = &#123;&#125;\n    <span class=\"hljs-comment\">// 代理options.data中的数据</span>\n    <span class=\"hljs-keyword\">this</span>.proxyData();\n    <span class=\"hljs-comment\">// 劫持事件</span>\n    <span class=\"hljs-keyword\">this</span>.observe();\n    <span class=\"hljs-comment\">// 编译 </span>\n    <span class=\"hljs-keyword\">this</span>.compile(<span class=\"hljs-keyword\">this</span>.$el);\n&#125;</code></pre>\n\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><p>将options.data里所有参数赋给vue实例，通过<code>Object.defineProperty</code>可以的getter和setter函数实现代理。这样可以通过实例直接访问或修改options中的数据。</p>\n<pre><code class=\"hljs kotlin\">proxyData()&#123;\n    <span class=\"hljs-keyword\">for</span> (let key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span>.$options.<span class=\"hljs-keyword\">data</span>)&#123;\n      Object.defineProperty(<span class=\"hljs-keyword\">this</span>,key, &#123;\n        configurable: <span class=\"hljs-literal\">false</span>,\n        enumerable: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">// value: &#x27;&#x27;,</span>\n        <span class=\"hljs-comment\">// writable: true,     </span>\n        <span class=\"hljs-keyword\">get</span>()&#123;\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.$options.<span class=\"hljs-keyword\">data</span>[key];\n        &#125;,\n        <span class=\"hljs-keyword\">set</span>(<span class=\"hljs-keyword\">val</span>)&#123;\n          <span class=\"hljs-keyword\">this</span>.$options.<span class=\"hljs-keyword\">data</span>[key] = <span class=\"hljs-keyword\">val</span>;\n        &#125;\n      &#125;)\n    &#125;\n&#125;</code></pre>\n<p>关于<code>Object.defineProperty</code>的参数和用法可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">MDN</a></p>\n<h3 id=\"数据侦听\"><a href=\"#数据侦听\" class=\"headerlink\" title=\"数据侦听\"></a>数据侦听</h3><p>下一步是对<code>$options.data</code>里的各个属性进行侦听。Vue2也是运用了<code>Object.defineProperty</code>来实现观察者模式。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">observe</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">let</span> that = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">this</span>.$options.data)&#123;\n      <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-built_in\">this</span>.$options.data[key];\n      <span class=\"hljs-built_in\">Object</span>.defineProperty(<span class=\"hljs-built_in\">this</span>.$options.data, key, &#123;\n        configurable: <span class=\"hljs-literal\">false</span>,\n        enumerable: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;获取数据&#x27;</span>);\n          <span class=\"hljs-keyword\">return</span> value;\n        &#125;,\n        <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;设置数据&#x27;</span>);\n          value = val;\n          <span class=\"hljs-keyword\">if</span> (that.$watchEvent[key]) &#123;\n            that.$watchEvent[key].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item,index</span>)=&gt;</span>&#123;\n              item.update();\n            &#125;)\n          &#125;\n        &#125;\n      &#125;)\n    &#125;\n&#125;</code></pre>\n<p>现在option.data中的属性都被监听着。获取和设置这些属性能够触发一些行为。</p>\n<h3 id=\"依赖收集\"><a href=\"#依赖收集\" class=\"headerlink\" title=\"依赖收集\"></a>依赖收集</h3><p>所有数据被监听后，还需要找到视图中与数据绑定的节点。</p>\n<p>先创建一个Watch类，来监听与data绑定的dom节点。</p>\n<pre><code class=\"hljs kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Watch</span></span>&#123;\n  <span class=\"hljs-keyword\">constructor</span>(vm,key,node,attr,nodeType)&#123;\n    <span class=\"hljs-keyword\">this</span>.vm = vm;\n    <span class=\"hljs-comment\">// key 为绑定的vm触发的属性</span>\n    <span class=\"hljs-keyword\">this</span>.key = key;\n    <span class=\"hljs-comment\">// vm[key]数据绑定的HTML节点</span>\n    <span class=\"hljs-keyword\">this</span>.node = node;\n    <span class=\"hljs-comment\">// vm[key]绑定的html节点的属性名称</span>\n    <span class=\"hljs-keyword\">this</span>.attr = attr;\n    <span class=\"hljs-comment\">// 节点类型</span>\n    <span class=\"hljs-keyword\">this</span>.nodeType = nodeType;\n  &#125;\n  update()&#123;\n    console.log(<span class=\"hljs-string\">&#x27;更新视图&#x27;</span>);\n    <span class=\"hljs-keyword\">this</span>.node[<span class=\"hljs-keyword\">this</span>.attr] = <span class=\"hljs-keyword\">this</span>.vm[<span class=\"hljs-keyword\">this</span>.key]; \n  &#125;\n&#125;</code></pre>\n<p>在<code>constructor</code>中声明变量<code>$watchEvent</code>，用来存储数据与dom节点的联系。其数据结构如下所示</p>\n<pre><code class=\"hljs dts\">$watchEvent = &#123;\n<span class=\"hljs-symbol\">    name:</span> [Watch],\n<span class=\"hljs-symbol\">    value:</span> [Watch,Watch,Watch]\n&#125;\n</code></pre>\n<p>可以看到，<code>$watchEvent</code>将data中的属性名作为key，watch实例数组作为value。其中每一个watch实例保存着依赖该数据的dom节点。</p>\n<p>当一个数据变化后，该数据的setter被触发，然后setter再触发每一个Watch实例的update方法。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// observe()</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;触发设置内容事件&#x27;</span>);\n  value = val;\n  <span class=\"hljs-keyword\">if</span> (that.$watchEvent[key]) &#123;\n    that.$watchEvent[key].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item,index</span>)=&gt;</span>&#123;\n      item.update();\n    &#125;)\n  &#125;\n  <span class=\"hljs-comment\">// 触发更新事件</span>\n&#125;</code></pre>\n<p>这样视图也会更新。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>建立好<code>$watchEvent</code>和<code>Watch</code>类后，需要将el节点里所有childNodes进行遍历，找到使用模板语法、v-html等自定义属性的Dom节点。通过nodeType来判断节点的类型。</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Rnode</span>.</span></span>childNodes.<span class=\"hljs-keyword\">for</span><span class=\"hljs-constructor\">Each((<span class=\"hljs-params\">node</span>, <span class=\"hljs-params\">index</span>)</span> =&gt; &#123;\n  <span class=\"hljs-keyword\">if</span> (node.nodeType<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>)&#123;\n    <span class=\"hljs-comment\">//处理元素类型的节点</span>\n    ...\n  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.nodeType<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">3</span>)&#123;\n    <span class=\"hljs-comment\">//处理文本类型的节点</span>\n&#125;\n&#125;</code></pre>\n<h5 id=\"元素类型的节点\"><a href=\"#元素类型的节点\" class=\"headerlink\" title=\"元素类型的节点\"></a>元素类型的节点</h5><p>对于元素类型的节点，主要是找到节点的自定义属性。如v-html，v-model。</p>\n<p>如果节点使用了v-html，Watch将绑定的数据与节点的innerHTML联系起来。一旦数据变化，Watch触发update，节点的innerHTML也随之变化。</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (node.has<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">html</span>&#x27;)</span>)&#123;\n  <span class=\"hljs-keyword\">let</span> vmKey = node.get<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">html</span>&#x27;)</span>.trim<span class=\"hljs-literal\">()</span>;\n  node.innerHTML = this<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>;\n  <span class=\"hljs-keyword\">let</span> watcher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Watch(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">vmKey</span>, <span class=\"hljs-params\">node</span>, &#x27;<span class=\"hljs-params\">innerHTML</span>&#x27;)</span>;\n  <span class=\"hljs-keyword\">if</span> (this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>)&#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span> = <span class=\"hljs-literal\">[]</span>;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125;\n  <span class=\"hljs-comment\">// 删除节点事件</span>\n  node.remove<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">html</span>&#x27;)</span>;\n&#125;</code></pre>\n<p>对于使用v-model的节点，Watch将绑定的数据与节点的value联系起来，数据变化，value也变化。同时，对节点绑定监听事件，节点的value变化后，实例数据也跟着变化。这样便实现了双向绑定。</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (node.has<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">model</span>&#x27;)</span>)&#123;\n  <span class=\"hljs-keyword\">let</span> vmKey = node.get<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">model</span>&#x27;)</span>.trim<span class=\"hljs-literal\">()</span>;\n  node.value = this<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>;\n  <span class=\"hljs-keyword\">let</span> watcher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Watch(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">vmKey</span>, <span class=\"hljs-params\">node</span>, &#x27;<span class=\"hljs-params\">value</span>&#x27;)</span>;\n  <span class=\"hljs-keyword\">if</span> (this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>)&#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span> = <span class=\"hljs-literal\">[]</span>;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125;\n  <span class=\"hljs-comment\">// 绑定input监听事件</span>\n  node.add<span class=\"hljs-constructor\">EventListener(&#x27;<span class=\"hljs-params\">input</span>&#x27;, (<span class=\"hljs-params\">event</span>)</span>=&gt;&#123;\n    this<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span> = node.value;\n  &#125;)\n  node.remove<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">model</span>&#x27;)</span>;\n&#125;</code></pre>\n\n<p>如果遇到事件属性，为该节点绑定该事件。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (node.hasAttribute(<span class=\"hljs-string\">&#x27;@click&#x27;</span>))&#123;\n  <span class=\"hljs-keyword\">let</span> vmKey = node.getAttribute(<span class=\"hljs-string\">&#x27;@click&#x27;</span>).trim();\n  node.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>)=&gt;</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.eventFn = <span class=\"hljs-built_in\">this</span>.$options.methods[vmKey].bind(<span class=\"hljs-built_in\">this</span>)();\n  &#125;)\n&#125;</code></pre>\n<p>如果元素类型的节点存在子节点，需要对该节点递归调用compile方法。</p>\n<pre><code class=\"hljs crmsh\">// 元素类型的节点还有子节点\nif (node.childNodes.length &gt; <span class=\"hljs-number\">0</span>)&#123;\n  this.compile(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);</span>\n<span class=\"hljs-title\">&#125;</span></code></pre>\n<h5 id=\"文本类型的节点\"><a href=\"#文本类型的节点\" class=\"headerlink\" title=\"文本类型的节点\"></a>文本类型的节点</h5><p>遇到节点是文本类型的，watch将节点的<code>textContent</code>属性和数据相联系。<code>textContent</code>需要先用正则对模板语法处理，找到vmKey。当数据改变，整个<code>textContent</code>区域渲染为最新的数据。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (node.nodeType == <span class=\"hljs-number\">3</span>)&#123;\n    <span class=\"hljs-comment\">// 文本类型</span>\n    <span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/g</span>;\n    <span class=\"hljs-built_in\">console</span>.log(node);\n    node.textContent = node.textContent.replace(reg, <span class=\"hljs-function\">(<span class=\"hljs-params\">match, vmKey</span>)=&gt;</span>&#123;\n      vmKey = vmKey.trim();\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.hasOwnProperty(vmKey))&#123;\n        <span class=\"hljs-keyword\">let</span> watcher = <span class=\"hljs-keyword\">new</span> Watch(<span class=\"hljs-built_in\">this</span>, vmKey, node, <span class=\"hljs-string\">&#x27;textContent&#x27;</span>);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey])&#123;\n          <span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey].push(watcher);\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n          <span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey] = [];\n          <span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey].push(watcher);\n        &#125;\n      &#125;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>[vmKey]\n    &#125;)\n&#125;</code></pre>\n\n<!--### 生命周期 -->\n<!--##### beforeCreate 和 created-->\n<!--```-->\n<!--update(){-->\n<!--if (typeof options.beforeUpdate === 'function'){-->\n<!--  options.beforeUpdate.call(this);-->\n<!--}-->\n<!--this.node[this.attr] = this.vm[this.key]; -->\n<!--if (typeof options.updated === 'function'){-->\n<!--  options.updated.call(this);-->\n<!--}-->\n<!--}-->\n<!--```-->\n\n<p>这样，一个简易的vue框架完成了。</p>\n<p><a href=\"http://teletubby.github.io/\">代码地址</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Vue是一款帮助前端快读构建UI的渐进式框架。了解原理有助于项目的构建。</p>\n<h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>创建了一个id为app的div节点，作为挂载点。子节点包含了&lt;!–swig￼14–&gt;，v-html，v-model，@click这几种绑定数据与事件的属性。</p>\n<pre><code class=\"hljs handlebars\"><span class=\"xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">id</span>=<span class=\"hljs-string\">&quot;app&quot;</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span>&gt;</span></span><span class=\"hljs-template-variable\">&#123;&#123; <span class=\"hljs-name\">name</span> &#125;&#125;</span><span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">v-html</span>=<span class=\"hljs-string\">&quot;value&quot;</span>&gt;</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">input</span> <span class=\"hljs-attr\">v-model</span>=<span class=\"hljs-string\">&quot;value&quot;</span>/&gt;</span></span>\n<span class=\"xml\">    <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">button</span> @<span class=\"hljs-attr\">click</span>=<span class=\"hljs-string\">&quot;changeValue&quot;</span>&gt;</span>changeValueTo1<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">button</span>&gt;</span></span>\n<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span></code></pre>\n<p>假设存在一个Vue类，用一个对象options作为其构建函数的参数，其中包括了el，data，methods三个属性。最后创建了一个Vue实例。</p>\n<pre><code class=\"hljs xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span>\n<span class=\"javascript\">  <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Vue</span> </span>&#123;</span>\n<span class=\"javascript\">    <span class=\"hljs-function\"><span class=\"hljs-title\">constructor</span>(<span class=\"hljs-params\">options</span>)</span>&#123;</span>\n        ...\n    &#125;\n    ...\n  &#125;\n  \n<span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> options = &#123;</span>\n<span class=\"javascript\">    el: <span class=\"hljs-string\">&quot;#app&quot;</span>,</span>\n    data:&#123;\n<span class=\"javascript\">      name: <span class=\"hljs-string\">&#x27;Jerry&#x27;</span>,</span>\n      value: 100,\n    &#125;,\n    methods: &#123;\n<span class=\"javascript\">      changeValue: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>&#123;</span>\n<span class=\"javascript\">        <span class=\"hljs-built_in\">this</span>.value = <span class=\"hljs-number\">1</span>;</span>\n      &#125;\n    &#125;\n  &#125;\n<span class=\"javascript\">  <span class=\"hljs-keyword\">let</span> app = <span class=\"hljs-keyword\">new</span> Vue(options);</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span></code></pre>\n<p>之后要做的便是实现这个Vue类，能够让options.data和前面的视图层绑定在一起。</p>\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>定义$el,$options用来存放挂载点和vue实例数据。<br>$watchEvent和三个方法的作用在后文会解释。</p>\n<pre><code class=\"hljs kotlin\"><span class=\"hljs-keyword\">constructor</span>(options)&#123;\n    <span class=\"hljs-keyword\">this</span>.$el = document.querySelector(options.el);\n    <span class=\"hljs-keyword\">this</span>.$options = options;\n    <span class=\"hljs-comment\">// 存放被劫持的节点</span>\n    <span class=\"hljs-keyword\">this</span>.$watchEvent = &#123;&#125;\n    <span class=\"hljs-comment\">// 代理options.data中的数据</span>\n    <span class=\"hljs-keyword\">this</span>.proxyData();\n    <span class=\"hljs-comment\">// 劫持事件</span>\n    <span class=\"hljs-keyword\">this</span>.observe();\n    <span class=\"hljs-comment\">// 编译 </span>\n    <span class=\"hljs-keyword\">this</span>.compile(<span class=\"hljs-keyword\">this</span>.$el);\n&#125;</code></pre>\n\n<h3 id=\"数据代理\"><a href=\"#数据代理\" class=\"headerlink\" title=\"数据代理\"></a>数据代理</h3><p>将options.data里所有参数赋给vue实例，通过<code>Object.defineProperty</code>可以的getter和setter函数实现代理。这样可以通过实例直接访问或修改options中的数据。</p>\n<pre><code class=\"hljs kotlin\">proxyData()&#123;\n    <span class=\"hljs-keyword\">for</span> (let key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-keyword\">this</span>.$options.<span class=\"hljs-keyword\">data</span>)&#123;\n      Object.defineProperty(<span class=\"hljs-keyword\">this</span>,key, &#123;\n        configurable: <span class=\"hljs-literal\">false</span>,\n        enumerable: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-comment\">// value: &#x27;&#x27;,</span>\n        <span class=\"hljs-comment\">// writable: true,     </span>\n        <span class=\"hljs-keyword\">get</span>()&#123;\n          <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>.$options.<span class=\"hljs-keyword\">data</span>[key];\n        &#125;,\n        <span class=\"hljs-keyword\">set</span>(<span class=\"hljs-keyword\">val</span>)&#123;\n          <span class=\"hljs-keyword\">this</span>.$options.<span class=\"hljs-keyword\">data</span>[key] = <span class=\"hljs-keyword\">val</span>;\n        &#125;\n      &#125;)\n    &#125;\n&#125;</code></pre>\n<p>关于<code>Object.defineProperty</code>的参数和用法可以参考<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/defineProperty\">MDN</a></p>\n<h3 id=\"数据侦听\"><a href=\"#数据侦听\" class=\"headerlink\" title=\"数据侦听\"></a>数据侦听</h3><p>下一步是对<code>$options.data</code>里的各个属性进行侦听。Vue2也是运用了<code>Object.defineProperty</code>来实现观察者模式。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-function\"><span class=\"hljs-title\">observe</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n    <span class=\"hljs-keyword\">let</span> that = <span class=\"hljs-built_in\">this</span>;\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-keyword\">let</span> key <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">this</span>.$options.data)&#123;\n      <span class=\"hljs-keyword\">let</span> value = <span class=\"hljs-built_in\">this</span>.$options.data[key];\n      <span class=\"hljs-built_in\">Object</span>.defineProperty(<span class=\"hljs-built_in\">this</span>.$options.data, key, &#123;\n        configurable: <span class=\"hljs-literal\">false</span>,\n        enumerable: <span class=\"hljs-literal\">true</span>,\n        <span class=\"hljs-function\"><span class=\"hljs-title\">get</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;获取数据&#x27;</span>);\n          <span class=\"hljs-keyword\">return</span> value;\n        &#125;,\n        <span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n          <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;设置数据&#x27;</span>);\n          value = val;\n          <span class=\"hljs-keyword\">if</span> (that.$watchEvent[key]) &#123;\n            that.$watchEvent[key].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item,index</span>)=&gt;</span>&#123;\n              item.update();\n            &#125;)\n          &#125;\n        &#125;\n      &#125;)\n    &#125;\n&#125;</code></pre>\n<p>现在option.data中的属性都被监听着。获取和设置这些属性能够触发一些行为。</p>\n<h3 id=\"依赖收集\"><a href=\"#依赖收集\" class=\"headerlink\" title=\"依赖收集\"></a>依赖收集</h3><p>所有数据被监听后，还需要找到视图中与数据绑定的节点。</p>\n<p>先创建一个Watch类，来监听与data绑定的dom节点。</p>\n<pre><code class=\"hljs kotlin\"><span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span> <span class=\"hljs-title\">Watch</span></span>&#123;\n  <span class=\"hljs-keyword\">constructor</span>(vm,key,node,attr,nodeType)&#123;\n    <span class=\"hljs-keyword\">this</span>.vm = vm;\n    <span class=\"hljs-comment\">// key 为绑定的vm触发的属性</span>\n    <span class=\"hljs-keyword\">this</span>.key = key;\n    <span class=\"hljs-comment\">// vm[key]数据绑定的HTML节点</span>\n    <span class=\"hljs-keyword\">this</span>.node = node;\n    <span class=\"hljs-comment\">// vm[key]绑定的html节点的属性名称</span>\n    <span class=\"hljs-keyword\">this</span>.attr = attr;\n    <span class=\"hljs-comment\">// 节点类型</span>\n    <span class=\"hljs-keyword\">this</span>.nodeType = nodeType;\n  &#125;\n  update()&#123;\n    console.log(<span class=\"hljs-string\">&#x27;更新视图&#x27;</span>);\n    <span class=\"hljs-keyword\">this</span>.node[<span class=\"hljs-keyword\">this</span>.attr] = <span class=\"hljs-keyword\">this</span>.vm[<span class=\"hljs-keyword\">this</span>.key]; \n  &#125;\n&#125;</code></pre>\n<p>在<code>constructor</code>中声明变量<code>$watchEvent</code>，用来存储数据与dom节点的联系。其数据结构如下所示</p>\n<pre><code class=\"hljs dts\">$watchEvent = &#123;\n<span class=\"hljs-symbol\">    name:</span> [Watch],\n<span class=\"hljs-symbol\">    value:</span> [Watch,Watch,Watch]\n&#125;\n</code></pre>\n<p>可以看到，<code>$watchEvent</code>将data中的属性名作为key，watch实例数组作为value。其中每一个watch实例保存着依赖该数据的dom节点。</p>\n<p>当一个数据变化后，该数据的setter被触发，然后setter再触发每一个Watch实例的update方法。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-comment\">// observe()</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">set</span>(<span class=\"hljs-params\">val</span>)</span>&#123;\n  <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">&#x27;触发设置内容事件&#x27;</span>);\n  value = val;\n  <span class=\"hljs-keyword\">if</span> (that.$watchEvent[key]) &#123;\n    that.$watchEvent[key].forEach(<span class=\"hljs-function\">(<span class=\"hljs-params\">item,index</span>)=&gt;</span>&#123;\n      item.update();\n    &#125;)\n  &#125;\n  <span class=\"hljs-comment\">// 触发更新事件</span>\n&#125;</code></pre>\n<p>这样视图也会更新。</p>\n<h3 id=\"编译\"><a href=\"#编译\" class=\"headerlink\" title=\"编译\"></a>编译</h3><p>建立好<code>$watchEvent</code>和<code>Watch</code>类后，需要将el节点里所有childNodes进行遍历，找到使用模板语法、v-html等自定义属性的Dom节点。通过nodeType来判断节点的类型。</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-module-access\"><span class=\"hljs-module\"><span class=\"hljs-identifier\">Rnode</span>.</span></span>childNodes.<span class=\"hljs-keyword\">for</span><span class=\"hljs-constructor\">Each((<span class=\"hljs-params\">node</span>, <span class=\"hljs-params\">index</span>)</span> =&gt; &#123;\n  <span class=\"hljs-keyword\">if</span> (node.nodeType<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">1</span>)&#123;\n    <span class=\"hljs-comment\">//处理元素类型的节点</span>\n    ...\n  &#125; <span class=\"hljs-keyword\">else</span> <span class=\"hljs-keyword\">if</span> (node.nodeType<span class=\"hljs-operator\"> == </span><span class=\"hljs-number\">3</span>)&#123;\n    <span class=\"hljs-comment\">//处理文本类型的节点</span>\n&#125;\n&#125;</code></pre>\n<h5 id=\"元素类型的节点\"><a href=\"#元素类型的节点\" class=\"headerlink\" title=\"元素类型的节点\"></a>元素类型的节点</h5><p>对于元素类型的节点，主要是找到节点的自定义属性。如v-html，v-model。</p>\n<p>如果节点使用了v-html，Watch将绑定的数据与节点的innerHTML联系起来。一旦数据变化，Watch触发update，节点的innerHTML也随之变化。</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (node.has<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">html</span>&#x27;)</span>)&#123;\n  <span class=\"hljs-keyword\">let</span> vmKey = node.get<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">html</span>&#x27;)</span>.trim<span class=\"hljs-literal\">()</span>;\n  node.innerHTML = this<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>;\n  <span class=\"hljs-keyword\">let</span> watcher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Watch(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">vmKey</span>, <span class=\"hljs-params\">node</span>, &#x27;<span class=\"hljs-params\">innerHTML</span>&#x27;)</span>;\n  <span class=\"hljs-keyword\">if</span> (this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>)&#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span> = <span class=\"hljs-literal\">[]</span>;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125;\n  <span class=\"hljs-comment\">// 删除节点事件</span>\n  node.remove<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">html</span>&#x27;)</span>;\n&#125;</code></pre>\n<p>对于使用v-model的节点，Watch将绑定的数据与节点的value联系起来，数据变化，value也变化。同时，对节点绑定监听事件，节点的value变化后，实例数据也跟着变化。这样便实现了双向绑定。</p>\n<pre><code class=\"hljs reasonml\"><span class=\"hljs-keyword\">if</span> (node.has<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">model</span>&#x27;)</span>)&#123;\n  <span class=\"hljs-keyword\">let</span> vmKey = node.get<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">model</span>&#x27;)</span>.trim<span class=\"hljs-literal\">()</span>;\n  node.value = this<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>;\n  <span class=\"hljs-keyword\">let</span> watcher = <span class=\"hljs-keyword\">new</span> <span class=\"hljs-constructor\">Watch(<span class=\"hljs-params\">this</span>, <span class=\"hljs-params\">vmKey</span>, <span class=\"hljs-params\">node</span>, &#x27;<span class=\"hljs-params\">value</span>&#x27;)</span>;\n  <span class=\"hljs-keyword\">if</span> (this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>)&#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125; <span class=\"hljs-keyword\">else</span> &#123;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span> = <span class=\"hljs-literal\">[]</span>;\n    this.$watchEvent<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span>.push(watcher);\n  &#125;\n  <span class=\"hljs-comment\">// 绑定input监听事件</span>\n  node.add<span class=\"hljs-constructor\">EventListener(&#x27;<span class=\"hljs-params\">input</span>&#x27;, (<span class=\"hljs-params\">event</span>)</span>=&gt;&#123;\n    this<span class=\"hljs-literal\">[<span class=\"hljs-identifier\">vmKey</span>]</span> = node.value;\n  &#125;)\n  node.remove<span class=\"hljs-constructor\">Attribute(&#x27;<span class=\"hljs-params\">v</span>-<span class=\"hljs-params\">model</span>&#x27;)</span>;\n&#125;</code></pre>\n\n<p>如果遇到事件属性，为该节点绑定该事件。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (node.hasAttribute(<span class=\"hljs-string\">&#x27;@click&#x27;</span>))&#123;\n  <span class=\"hljs-keyword\">let</span> vmKey = node.getAttribute(<span class=\"hljs-string\">&#x27;@click&#x27;</span>).trim();\n  node.addEventListener(<span class=\"hljs-string\">&#x27;click&#x27;</span>,<span class=\"hljs-function\">(<span class=\"hljs-params\">event</span>)=&gt;</span>&#123;\n    <span class=\"hljs-built_in\">this</span>.eventFn = <span class=\"hljs-built_in\">this</span>.$options.methods[vmKey].bind(<span class=\"hljs-built_in\">this</span>)();\n  &#125;)\n&#125;</code></pre>\n<p>如果元素类型的节点存在子节点，需要对该节点递归调用compile方法。</p>\n<pre><code class=\"hljs crmsh\">// 元素类型的节点还有子节点\nif (node.childNodes.length &gt; <span class=\"hljs-number\">0</span>)&#123;\n  this.compile(<span class=\"hljs-keyword\">node</span><span class=\"hljs-title\">);</span>\n<span class=\"hljs-title\">&#125;</span></code></pre>\n<h5 id=\"文本类型的节点\"><a href=\"#文本类型的节点\" class=\"headerlink\" title=\"文本类型的节点\"></a>文本类型的节点</h5><p>遇到节点是文本类型的，watch将节点的<code>textContent</code>属性和数据相联系。<code>textContent</code>需要先用正则对模板语法处理，找到vmKey。当数据改变，整个<code>textContent</code>区域渲染为最新的数据。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">if</span> (node.nodeType == <span class=\"hljs-number\">3</span>)&#123;\n    <span class=\"hljs-comment\">// 文本类型</span>\n    <span class=\"hljs-keyword\">let</span> reg = <span class=\"hljs-regexp\">/\\&#123;\\&#123;(.*)\\&#125;\\&#125;/g</span>;\n    <span class=\"hljs-built_in\">console</span>.log(node);\n    node.textContent = node.textContent.replace(reg, <span class=\"hljs-function\">(<span class=\"hljs-params\">match, vmKey</span>)=&gt;</span>&#123;\n      vmKey = vmKey.trim();\n      <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.hasOwnProperty(vmKey))&#123;\n        <span class=\"hljs-keyword\">let</span> watcher = <span class=\"hljs-keyword\">new</span> Watch(<span class=\"hljs-built_in\">this</span>, vmKey, node, <span class=\"hljs-string\">&#x27;textContent&#x27;</span>);\n        <span class=\"hljs-keyword\">if</span> (<span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey])&#123;\n          <span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey].push(watcher);\n        &#125; <span class=\"hljs-keyword\">else</span> &#123;\n          <span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey] = [];\n          <span class=\"hljs-built_in\">this</span>.$watchEvent[vmKey].push(watcher);\n        &#125;\n      &#125;\n      <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">this</span>[vmKey]\n    &#125;)\n&#125;</code></pre>\n\n<!--### 生命周期 -->\n<!--##### beforeCreate 和 created-->\n<!--```-->\n<!--update(){-->\n<!--if (typeof options.beforeUpdate === 'function'){-->\n<!--  options.beforeUpdate.call(this);-->\n<!--}-->\n<!--this.node[this.attr] = this.vm[this.key]; -->\n<!--if (typeof options.updated === 'function'){-->\n<!--  options.updated.call(this);-->\n<!--}-->\n<!--}-->\n<!--```-->\n\n<p>这样，一个简易的vue框架完成了。</p>\n<p><a href=\"http://teletubby.github.io/\">代码地址</a></p>\n"},{"title":"微信小程序大赛总结","date":"2020-09-22T16:22:29.000Z","_content":"\n今年四月份参加了微信小程序大赛。从产品设计开始，花了三个月做了一个以校园众包为主题的小程序（众包包，这个名字我现在听上去有种卖二手包的感觉。。），最后拿了华东区三等奖。选择这个主题最主要是因为自己的研究方向跟它相关。当然，众包这个概念也有一段时间了，最初常用于机器学习的标签样本收集，如著名的MTurk平台。随着移动互联网的发展，移动众包也成为了一个热点，其特点是工作者需要移动到固定地点才能完成任务，如Uber、蜂鸟众包。\n\n抛开一些概念，实际上众包包是个服务于校园师生的招募小程序。用户在小程序发布一个任务，规定好时间、地点和报酬，等待别的用户去接受他的任务，这个过程就是在招募劳动力。在实现过程中，如何描述任务和规定报酬是最令人头痛的。原本团队是想专做配送任务，但后来觉得局限性太强，扩展了更多的任务类型。报酬的话由于一些不可抗力的因素，暂时用自定的积分来规定。\n\n由于团队里只有我一个前端，技术上用了腾讯云。这对于前端而说是比较友好的，直接减少了搭建后端和服务器的工作，将重心放在业务逻辑上，学习开发起来还是比较快的。\n\n\n演示地址：https://www.bilibili.com/video/BV1yK4y1x7k3?from=search&seid=11480577856248255205\n\n项目地址：https://github.com/ATeletubby/wx-debater\n","source":"_posts/微信小程序大赛总结.md","raw":"---\ntitle: 微信小程序大赛总结\ndate: 2020-9-23 00:22:29\ntags: 感想\n---\n\n今年四月份参加了微信小程序大赛。从产品设计开始，花了三个月做了一个以校园众包为主题的小程序（众包包，这个名字我现在听上去有种卖二手包的感觉。。），最后拿了华东区三等奖。选择这个主题最主要是因为自己的研究方向跟它相关。当然，众包这个概念也有一段时间了，最初常用于机器学习的标签样本收集，如著名的MTurk平台。随着移动互联网的发展，移动众包也成为了一个热点，其特点是工作者需要移动到固定地点才能完成任务，如Uber、蜂鸟众包。\n\n抛开一些概念，实际上众包包是个服务于校园师生的招募小程序。用户在小程序发布一个任务，规定好时间、地点和报酬，等待别的用户去接受他的任务，这个过程就是在招募劳动力。在实现过程中，如何描述任务和规定报酬是最令人头痛的。原本团队是想专做配送任务，但后来觉得局限性太强，扩展了更多的任务类型。报酬的话由于一些不可抗力的因素，暂时用自定的积分来规定。\n\n由于团队里只有我一个前端，技术上用了腾讯云。这对于前端而说是比较友好的，直接减少了搭建后端和服务器的工作，将重心放在业务逻辑上，学习开发起来还是比较快的。\n\n\n演示地址：https://www.bilibili.com/video/BV1yK4y1x7k3?from=search&seid=11480577856248255205\n\n项目地址：https://github.com/ATeletubby/wx-debater\n","slug":"微信小程序大赛总结","published":1,"updated":"2020-12-05T06:27:44.093Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckibbf3b60000q0uhch6ggxkk","content":"<p>今年四月份参加了微信小程序大赛。从产品设计开始，花了三个月做了一个以校园众包为主题的小程序（众包包，这个名字我现在听上去有种卖二手包的感觉。。），最后拿了华东区三等奖。选择这个主题最主要是因为自己的研究方向跟它相关。当然，众包这个概念也有一段时间了，最初常用于机器学习的标签样本收集，如著名的MTurk平台。随着移动互联网的发展，移动众包也成为了一个热点，其特点是工作者需要移动到固定地点才能完成任务，如Uber、蜂鸟众包。</p>\n<p>抛开一些概念，实际上众包包是个服务于校园师生的招募小程序。用户在小程序发布一个任务，规定好时间、地点和报酬，等待别的用户去接受他的任务，这个过程就是在招募劳动力。在实现过程中，如何描述任务和规定报酬是最令人头痛的。原本团队是想专做配送任务，但后来觉得局限性太强，扩展了更多的任务类型。报酬的话由于一些不可抗力的因素，暂时用自定的积分来规定。</p>\n<p>由于团队里只有我一个前端，技术上用了腾讯云。这对于前端而说是比较友好的，直接减少了搭建后端和服务器的工作，将重心放在业务逻辑上，学习开发起来还是比较快的。</p>\n<p>演示地址：<a href=\"https://www.bilibili.com/video/BV1yK4y1x7k3?from=search&amp;seid=11480577856248255205\">https://www.bilibili.com/video/BV1yK4y1x7k3?from=search&amp;seid=11480577856248255205</a></p>\n<p>项目地址：<a href=\"https://github.com/ATeletubby/wx-debater\">https://github.com/ATeletubby/wx-debater</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>今年四月份参加了微信小程序大赛。从产品设计开始，花了三个月做了一个以校园众包为主题的小程序（众包包，这个名字我现在听上去有种卖二手包的感觉。。），最后拿了华东区三等奖。选择这个主题最主要是因为自己的研究方向跟它相关。当然，众包这个概念也有一段时间了，最初常用于机器学习的标签样本收集，如著名的MTurk平台。随着移动互联网的发展，移动众包也成为了一个热点，其特点是工作者需要移动到固定地点才能完成任务，如Uber、蜂鸟众包。</p>\n<p>抛开一些概念，实际上众包包是个服务于校园师生的招募小程序。用户在小程序发布一个任务，规定好时间、地点和报酬，等待别的用户去接受他的任务，这个过程就是在招募劳动力。在实现过程中，如何描述任务和规定报酬是最令人头痛的。原本团队是想专做配送任务，但后来觉得局限性太强，扩展了更多的任务类型。报酬的话由于一些不可抗力的因素，暂时用自定的积分来规定。</p>\n<p>由于团队里只有我一个前端，技术上用了腾讯云。这对于前端而说是比较友好的，直接减少了搭建后端和服务器的工作，将重心放在业务逻辑上，学习开发起来还是比较快的。</p>\n<p>演示地址：<a href=\"https://www.bilibili.com/video/BV1yK4y1x7k3?from=search&amp;seid=11480577856248255205\">https://www.bilibili.com/video/BV1yK4y1x7k3?from=search&amp;seid=11480577856248255205</a></p>\n<p>项目地址：<a href=\"https://github.com/ATeletubby/wx-debater\">https://github.com/ATeletubby/wx-debater</a></p>\n"},{"title":"JS的词法作用域与this的问题","date":"2021-02-09T17:22:04.000Z","_content":"面试的时候遇到一道题\n```\n    inner = 'window';\n    function say() {\n        console.log(inner);\n        console.log(this.inner);\n    }\n\n    var obj1 = (function() {\n        var inner = '1-1';\n        return {\n            inner: '1-2',\n            say: function() {\n                console.log(inner);\n                console.log(this.inner);\n            }\n        }\n    })();\n\n    var obj2 = (function() {\n        var inner = '2-1';\n        return {\n            inner: '2-2',\n            say: function() {\n                console.log(inner);\n                console.log(this.inner);\n            }\n        }\n    })();\n    say();\n    obj1.say();\n    obj2.say();\n    obj1.say = say;\n    obj1.say();\n    obj1.say = obj2.say;\n    obj1.say();\n    // 程序输出？\n\n```\n这题考察的是词法作用域、闭包和this的指向。\n\n首先需要了解词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，当词法分析器处理代码时会保持作用域不变（除了eval，with）\n而this的指向一般都是在函数运行时绑定的（谁调用函数，this就指向谁）。下面分别分析每个`say()`的输出。\n\n第一个`say()`输出`window window`。\n因为在函数作用域内找不到inner，只能在全局作用域中找到。所以`inner = window`, 而`say()`调用的时候，是不带任何修饰的，所以应用了this的默认绑定，即this指向了全局对象window。值得一提的是，如果函数内使用了严格模式，this会绑定`undefined`。\n```\nvar inner = 'window';\nfunction say(){\n    'use strict'\n     console.log(this.inner);\n}\nsay() // TypeError: Cannot read property 'inner' of undefined\n```\n\n第二个`obj1.say()`输出`1-1 1-2`。\n首先`obj1.say()`是一个闭包，指向立即执行函数（IIFE）的作用域，所以在作用域内申明的`inner`没有因函数执行完毕而被垃圾回收。第一个`console.log`输出的是IIFE内部的inner。而`obj1.say()`在调用时对this进行了隐性绑定，即this绑定到执行上下文对象（这里为`obj1`），所以`this.inner = obj1.inner`。\n\n第三个`obj2.say()`与第二个同理。输出`2-1 2-2`。\n\n第四个`obj1.say()`输出`window 1-2`。\n在调用之前，`obj1.say`指向了全局作用域中的`say`,此时不存在闭包，所以在函数`say`的词法作用域下，`inner = window`。由于执行上下文没变，依旧是`obj1`， `this.inner = obj1.inner`。\n\n第五个`obj1.say()`输出`2-1 1-2`。\n在调用之前，`obj1.say`指向了`obj2.say`,此时闭包所指向的作用域是`obj2`的IIFE，所以`inner = '2-1'`。`this.inner`依旧是`obj1.inner`。\n","source":"_posts/JS的词法作用域与this的问题.md","raw":"---\ntitle: JS的词法作用域与this的问题\ndate: 2021-02-10 01:22:04\ntags: 前端，Javascript\n---\n面试的时候遇到一道题\n```\n    inner = 'window';\n    function say() {\n        console.log(inner);\n        console.log(this.inner);\n    }\n\n    var obj1 = (function() {\n        var inner = '1-1';\n        return {\n            inner: '1-2',\n            say: function() {\n                console.log(inner);\n                console.log(this.inner);\n            }\n        }\n    })();\n\n    var obj2 = (function() {\n        var inner = '2-1';\n        return {\n            inner: '2-2',\n            say: function() {\n                console.log(inner);\n                console.log(this.inner);\n            }\n        }\n    })();\n    say();\n    obj1.say();\n    obj2.say();\n    obj1.say = say;\n    obj1.say();\n    obj1.say = obj2.say;\n    obj1.say();\n    // 程序输出？\n\n```\n这题考察的是词法作用域、闭包和this的指向。\n\n首先需要了解词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，当词法分析器处理代码时会保持作用域不变（除了eval，with）\n而this的指向一般都是在函数运行时绑定的（谁调用函数，this就指向谁）。下面分别分析每个`say()`的输出。\n\n第一个`say()`输出`window window`。\n因为在函数作用域内找不到inner，只能在全局作用域中找到。所以`inner = window`, 而`say()`调用的时候，是不带任何修饰的，所以应用了this的默认绑定，即this指向了全局对象window。值得一提的是，如果函数内使用了严格模式，this会绑定`undefined`。\n```\nvar inner = 'window';\nfunction say(){\n    'use strict'\n     console.log(this.inner);\n}\nsay() // TypeError: Cannot read property 'inner' of undefined\n```\n\n第二个`obj1.say()`输出`1-1 1-2`。\n首先`obj1.say()`是一个闭包，指向立即执行函数（IIFE）的作用域，所以在作用域内申明的`inner`没有因函数执行完毕而被垃圾回收。第一个`console.log`输出的是IIFE内部的inner。而`obj1.say()`在调用时对this进行了隐性绑定，即this绑定到执行上下文对象（这里为`obj1`），所以`this.inner = obj1.inner`。\n\n第三个`obj2.say()`与第二个同理。输出`2-1 2-2`。\n\n第四个`obj1.say()`输出`window 1-2`。\n在调用之前，`obj1.say`指向了全局作用域中的`say`,此时不存在闭包，所以在函数`say`的词法作用域下，`inner = window`。由于执行上下文没变，依旧是`obj1`， `this.inner = obj1.inner`。\n\n第五个`obj1.say()`输出`2-1 1-2`。\n在调用之前，`obj1.say`指向了`obj2.say`,此时闭包所指向的作用域是`obj2`的IIFE，所以`inner = '2-1'`。`this.inner`依旧是`obj1.inner`。\n","slug":"JS的词法作用域与this的问题","published":1,"updated":"2021-02-09T17:23:03.157Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckky9wn5u0000g8uh4f1de5i9","content":"<p>面试的时候遇到一道题</p>\n<pre><code class=\"hljs javascript\">inner = <span class=\"hljs-string\">&#x27;window&#x27;</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(inner);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n&#125;\n\n<span class=\"hljs-keyword\">var</span> obj1 = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> inner = <span class=\"hljs-string\">&#x27;1-1&#x27;</span>;\n    <span class=\"hljs-keyword\">return</span> &#123;\n        inner: <span class=\"hljs-string\">&#x27;1-2&#x27;</span>,\n        say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(inner);\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n        &#125;\n    &#125;\n&#125;)();\n\n<span class=\"hljs-keyword\">var</span> obj2 = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> inner = <span class=\"hljs-string\">&#x27;2-1&#x27;</span>;\n    <span class=\"hljs-keyword\">return</span> &#123;\n        inner: <span class=\"hljs-string\">&#x27;2-2&#x27;</span>,\n        say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(inner);\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n        &#125;\n    &#125;\n&#125;)();\nsay();\nobj1.say();\nobj2.say();\nobj1.say = say;\nobj1.say();\nobj1.say = obj2.say;\nobj1.say();\n<span class=\"hljs-comment\">// 程序输出？</span>\n</code></pre>\n<p>这题考察的是词法作用域、闭包和this的指向。</p>\n<p>首先需要了解词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，当词法分析器处理代码时会保持作用域不变（除了eval，with）<br>而this的指向一般都是在函数运行时绑定的（谁调用函数，this就指向谁）。下面分别分析每个<code>say()</code>的输出。</p>\n<p>第一个<code>say()</code>输出<code>window window</code>。<br>因为在函数作用域内找不到inner，只能在全局作用域中找到。所以<code>inner = window</code>, 而<code>say()</code>调用的时候，是不带任何修饰的，所以应用了this的默认绑定，即this指向了全局对象window。值得一提的是，如果函数内使用了严格模式，this会绑定<code>undefined</code>。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> inner = <span class=\"hljs-string\">&#x27;window&#x27;</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n<span class=\"hljs-meta\">    &#x27;use strict&#x27;</span>\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n&#125;\nsay() <span class=\"hljs-comment\">// TypeError: Cannot read property &#x27;inner&#x27; of undefined</span></code></pre>\n\n<p>第二个<code>obj1.say()</code>输出<code>1-1 1-2</code>。<br>首先<code>obj1.say()</code>是一个闭包，指向立即执行函数（IIFE）的作用域，所以在作用域内申明的<code>inner</code>没有因函数执行完毕而被垃圾回收。第一个<code>console.log</code>输出的是IIFE内部的inner。而<code>obj1.say()</code>在调用时对this进行了隐性绑定，即this绑定到执行上下文对象（这里为<code>obj1</code>），所以<code>this.inner = obj1.inner</code>。</p>\n<p>第三个<code>obj2.say()</code>与第二个同理。输出<code>2-1 2-2</code>。</p>\n<p>第四个<code>obj1.say()</code>输出<code>window 1-2</code>。<br>在调用之前，<code>obj1.say</code>指向了全局作用域中的<code>say</code>,此时不存在闭包，所以在函数<code>say</code>的词法作用域下，<code>inner = window</code>。由于执行上下文没变，依旧是<code>obj1</code>， <code>this.inner = obj1.inner</code>。</p>\n<p>第五个<code>obj1.say()</code>输出<code>2-1 1-2</code>。<br>在调用之前，<code>obj1.say</code>指向了<code>obj2.say</code>,此时闭包所指向的作用域是<code>obj2</code>的IIFE，所以<code>inner = &#39;2-1&#39;</code>。<code>this.inner</code>依旧是<code>obj1.inner</code>。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>面试的时候遇到一道题</p>\n<pre><code class=\"hljs javascript\">inner = <span class=\"hljs-string\">&#x27;window&#x27;</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-built_in\">console</span>.log(inner);\n    <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n&#125;\n\n<span class=\"hljs-keyword\">var</span> obj1 = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> inner = <span class=\"hljs-string\">&#x27;1-1&#x27;</span>;\n    <span class=\"hljs-keyword\">return</span> &#123;\n        inner: <span class=\"hljs-string\">&#x27;1-2&#x27;</span>,\n        say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(inner);\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n        &#125;\n    &#125;\n&#125;)();\n\n<span class=\"hljs-keyword\">var</span> obj2 = (<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n    <span class=\"hljs-keyword\">var</span> inner = <span class=\"hljs-string\">&#x27;2-1&#x27;</span>;\n    <span class=\"hljs-keyword\">return</span> &#123;\n        inner: <span class=\"hljs-string\">&#x27;2-2&#x27;</span>,\n        say: <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>&#123;\n            <span class=\"hljs-built_in\">console</span>.log(inner);\n            <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n        &#125;\n    &#125;\n&#125;)();\nsay();\nobj1.say();\nobj2.say();\nobj1.say = say;\nobj1.say();\nobj1.say = obj2.say;\nobj1.say();\n<span class=\"hljs-comment\">// 程序输出？</span>\n</code></pre>\n<p>这题考察的是词法作用域、闭包和this的指向。</p>\n<p>首先需要了解词法作用域是由你在写代码时将变量和块作用域写在哪里来决定的，当词法分析器处理代码时会保持作用域不变（除了eval，with）<br>而this的指向一般都是在函数运行时绑定的（谁调用函数，this就指向谁）。下面分别分析每个<code>say()</code>的输出。</p>\n<p>第一个<code>say()</code>输出<code>window window</code>。<br>因为在函数作用域内找不到inner，只能在全局作用域中找到。所以<code>inner = window</code>, 而<code>say()</code>调用的时候，是不带任何修饰的，所以应用了this的默认绑定，即this指向了全局对象window。值得一提的是，如果函数内使用了严格模式，this会绑定<code>undefined</code>。</p>\n<pre><code class=\"hljs javascript\"><span class=\"hljs-keyword\">var</span> inner = <span class=\"hljs-string\">&#x27;window&#x27;</span>;\n<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">say</span>(<span class=\"hljs-params\"></span>)</span>&#123;\n<span class=\"hljs-meta\">    &#x27;use strict&#x27;</span>\n     <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-built_in\">this</span>.inner);\n&#125;\nsay() <span class=\"hljs-comment\">// TypeError: Cannot read property &#x27;inner&#x27; of undefined</span></code></pre>\n\n<p>第二个<code>obj1.say()</code>输出<code>1-1 1-2</code>。<br>首先<code>obj1.say()</code>是一个闭包，指向立即执行函数（IIFE）的作用域，所以在作用域内申明的<code>inner</code>没有因函数执行完毕而被垃圾回收。第一个<code>console.log</code>输出的是IIFE内部的inner。而<code>obj1.say()</code>在调用时对this进行了隐性绑定，即this绑定到执行上下文对象（这里为<code>obj1</code>），所以<code>this.inner = obj1.inner</code>。</p>\n<p>第三个<code>obj2.say()</code>与第二个同理。输出<code>2-1 2-2</code>。</p>\n<p>第四个<code>obj1.say()</code>输出<code>window 1-2</code>。<br>在调用之前，<code>obj1.say</code>指向了全局作用域中的<code>say</code>,此时不存在闭包，所以在函数<code>say</code>的词法作用域下，<code>inner = window</code>。由于执行上下文没变，依旧是<code>obj1</code>， <code>this.inner = obj1.inner</code>。</p>\n<p>第五个<code>obj1.say()</code>输出<code>2-1 1-2</code>。<br>在调用之前，<code>obj1.say</code>指向了<code>obj2.say</code>,此时闭包所指向的作用域是<code>obj2</code>的IIFE，所以<code>inner = &#39;2-1&#39;</code>。<code>this.inner</code>依旧是<code>obj1.inner</code>。</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckhsvscas00010ouhbo5519eg","tag_id":"ckhsutvpk0002j4uhhlz068kp","_id":"ckhsvscav00020ouhfiiteqpa"},{"post_id":"ckibbf3b60000q0uhch6ggxkk","tag_id":"ckibbf3b80001q0uhfa6v4daf","_id":"ckibbf3ba0002q0uh1pj106ad"},{"post_id":"ckky9wn5u0000g8uh4f1de5i9","tag_id":"ckky9wn620001g8uhhcqnew2g","_id":"ckky9wn650002g8uh9xw8a1ub"}],"Tag":[{"name":"前端","_id":"ckhsutvpk0002j4uhhlz068kp"},{"name":"感想","_id":"ckibbf3b80001q0uhfa6v4daf"},{"name":"前端，Javascript","_id":"ckky9wn620001g8uhhcqnew2g"}]}}